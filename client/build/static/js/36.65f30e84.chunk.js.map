{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/perl/perl.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","token","keywords","builtinFunctions","builtinFileHandlers","builtinVariables","symbols","quoteLikeOps","escapes","tokenizer","root","include","cases","@keywords","@builtinFunctions","@builtinFileHandlers","@quoteLikeOps","next","@default","@builtinVariables","whitespace","numbers","strings","stringBody","dblStrings","dblStringBody","quotedConstructs","switchTo","qstring","$#==$S3","$#==$S2","qregexp","regexpModifiers","qqstring","heredoc","heredocBody","$1==$S2","perldoc","perldocBody","variables"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGON,EAAA,CACPQ,aAAA,GACAC,aAAA,QACAN,SAAA,EACAO,MAAA,oBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,wBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,mBACAL,KAAA,IACAC,MAAA,MAIAK,SAAA,2PAEAC,iBAAA,+/DAEAC,oBAAA,mDAEAC,iBAAA,2fAAgkB,84BAEhkBC,QAAA,2BACAC,aAAA,2CACAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,EACAC,QAAA,eACK,wBACLC,MAAA,CACAC,YAAA,UACAC,oBAAA,kBACAC,uBAAA,sBACAC,gBAAA,CACAf,MAAA,WACAgB,KAAA,oBAEAC,WAAA,MAGA,qCAAmC,CACnCN,MAAA,CACAO,oBAAA,sBACAD,WAAA,cAEK,CACLP,QAAA,YACK,CACLA,QAAA,eAEA,CACAA,QAAA,YAEA,CACAA,QAAA,YACK,cAAO,aACZ,0EAAwE,oCACxEA,QAAA,YACK,QAAO,cACZS,WAAA,+DACAC,QAAA,8GAEAC,QAAA,+BACAC,WAAA,kEAEAC,WAAA,kCACAC,cAAA,wFACAd,QAAA,cACK,gBAILe,iBAAA,sBACAzB,MAAA,eACA0B,SAAA,iBACK,qBACL1B,MAAA,eACA0B,SAAA,iBACK,oBAAqB,CAC1B1B,MAAA,eACA0B,SAAA,iBACK,oBACL1B,MAAA,eACA0B,SAAA,iBACK,iBACL1B,MAAA,eACA0B,SAAA,iBACK,oCACL1B,MAAA,eACA0B,SAAA,mBACK,uBACL1B,MAAA,eACA0B,SAAA,mBACK,kBACL1B,MAAA,eACA0B,SAAA,iBACK,kBACL1B,MAAA,eACA0B,SAAA,iBACK,iBAAkB,CACvB1B,MAAA,eACA0B,SAAA,iBACK,iBACL1B,MAAA,eACA0B,SAAA,iBACK,cACL1B,MAAA,eACA0B,SAAA,iBACK,kCACL1B,MAAA,eACA0B,SAAA,mBACK,oBACL1B,MAAA,eACA0B,SAAA,mBACK,iBACL1B,MAAA,eACA0B,SAAA,kBACK,iBACL1B,MAAA,eACA0B,SAAA,kBACK,gBAAiB,CACtB1B,MAAA,eACA0B,SAAA,kBACK,gBACL1B,MAAA,eACA0B,SAAA,kBACK,aACL1B,MAAA,eACA0B,SAAA,kBACK,gCACL1B,MAAA,eACA0B,SAAA,oBACK,mBACL1B,MAAA,eACA0B,SAAA,qBAMAC,QAAA,+BACAhB,MAAA,CACAiB,UAAA,CACA5B,MAAA,eACAgB,KAAA,QAEAa,UAAA,CACA7B,MAAA,eACAgB,KAAA,SAEAC,WAAA,aAOAa,QAAA,EACApB,QAAA,cACK,8BACLC,MAAA,CACAiB,UAAA,CACA5B,MAAA,eACAgB,KAAA,oBAEAa,UAAA,CACA7B,MAAA,eACAgB,KAAA,SAEAC,WAAA,aAGAc,gBAAA,wBACA/B,MAAA,kBACAgB,KAAA,aAMAgB,SAAA,EACAtB,QAAA,cACK,CACLA,QAAA,aAEAuB,QAAA,gCACAjC,MAAA,2BACAgB,KAAA,qBAEAkB,YAAA,iBACAvB,MAAA,CACAwB,UAAA,EACAnC,MAAA,2BACAgB,KAAA,YAEAC,WAAA,oBAEK,wBACLmB,QAAA,wCACAC,YAAA,8DACAC,UAAA","file":"static/js/36.65f30e84.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '`',\n    close: '`'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.perl',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  // https://learn.perl.org/docs/keywords.html\n  // Perl syntax\n  keywords: ['__DATA__', 'else', 'lock', '__END__', 'elsif', 'lt', '__FILE__', 'eq', '__LINE__', 'exp', 'ne', 'sub', '__PACKAGE__', 'for', 'no', 'and', 'foreach', 'or', 'unless', 'cmp', 'ge', 'package', 'until', 'continue', 'gt', 'while', 'CORE', 'if', 'xor', 'do', 'le', '__DIE__', '__WARN__'],\n  // Perl functions\n  builtinFunctions: ['-A', 'END', 'length', 'setpgrp', '-B', 'endgrent', 'link', 'setpriority', '-b', 'endhostent', 'listen', 'setprotoent', '-C', 'endnetent', 'local', 'setpwent', '-c', 'endprotoent', 'localtime', 'setservent', '-d', 'endpwent', 'log', 'setsockopt', '-e', 'endservent', 'lstat', 'shift', '-f', 'eof', 'map', 'shmctl', '-g', 'eval', 'mkdir', 'shmget', '-k', 'exec', 'msgctl', 'shmread', '-l', 'exists', 'msgget', 'shmwrite', '-M', 'exit', 'msgrcv', 'shutdown', '-O', 'fcntl', 'msgsnd', 'sin', '-o', 'fileno', 'my', 'sleep', '-p', 'flock', 'next', 'socket', '-r', 'fork', 'not', 'socketpair', '-R', 'format', 'oct', 'sort', '-S', 'formline', 'open', 'splice', '-s', 'getc', 'opendir', 'split', '-T', 'getgrent', 'ord', 'sprintf', '-t', 'getgrgid', 'our', 'sqrt', '-u', 'getgrnam', 'pack', 'srand', '-w', 'gethostbyaddr', 'pipe', 'stat', '-W', 'gethostbyname', 'pop', 'state', '-X', 'gethostent', 'pos', 'study', '-x', 'getlogin', 'print', 'substr', '-z', 'getnetbyaddr', 'printf', 'symlink', 'abs', 'getnetbyname', 'prototype', 'syscall', 'accept', 'getnetent', 'push', 'sysopen', 'alarm', 'getpeername', 'quotemeta', 'sysread', 'atan2', 'getpgrp', 'rand', 'sysseek', 'AUTOLOAD', 'getppid', 'read', 'system', 'BEGIN', 'getpriority', 'readdir', 'syswrite', 'bind', 'getprotobyname', 'readline', 'tell', 'binmode', 'getprotobynumber', 'readlink', 'telldir', 'bless', 'getprotoent', 'readpipe', 'tie', 'break', 'getpwent', 'recv', 'tied', 'caller', 'getpwnam', 'redo', 'time', 'chdir', 'getpwuid', 'ref', 'times', 'CHECK', 'getservbyname', 'rename', 'truncate', 'chmod', 'getservbyport', 'require', 'uc', 'chomp', 'getservent', 'reset', 'ucfirst', 'chop', 'getsockname', 'return', 'umask', 'chown', 'getsockopt', 'reverse', 'undef', 'chr', 'glob', 'rewinddir', 'UNITCHECK', 'chroot', 'gmtime', 'rindex', 'unlink', 'close', 'goto', 'rmdir', 'unpack', 'closedir', 'grep', 'say', 'unshift', 'connect', 'hex', 'scalar', 'untie', 'cos', 'index', 'seek', 'use', 'crypt', 'INIT', 'seekdir', 'utime', 'dbmclose', 'int', 'select', 'values', 'dbmopen', 'ioctl', 'semctl', 'vec', 'defined', 'join', 'semget', 'wait', 'delete', 'keys', 'semop', 'waitpid', 'DESTROY', 'kill', 'send', 'wantarray', 'die', 'last', 'setgrent', 'warn', 'dump', 'lc', 'sethostent', 'write', 'each', 'lcfirst', 'setnetent'],\n  // File handlers\n  builtinFileHandlers: ['ARGV', 'STDERR', 'STDOUT', 'ARGVOUT', 'STDIN', 'ENV'],\n  // Perl variables\n  builtinVariables: ['$!', '$^RE_TRIE_MAXBUF', '$LAST_REGEXP_CODE_RESULT', '$\"', '$^S', '$LIST_SEPARATOR', '$#', '$^T', '$MATCH', '$$', '$^TAINT', '$MULTILINE_MATCHING', '$%', '$^UNICODE', '$NR', '$&', '$^UTF8LOCALE', '$OFMT', \"$'\", '$^V', '$OFS', '$(', '$^W', '$ORS', '$)', '$^WARNING_BITS', '$OS_ERROR', '$*', '$^WIDE_SYSTEM_CALLS', '$OSNAME', '$+', '$^X', '$OUTPUT_AUTO_FLUSH', '$,', '$_', '$OUTPUT_FIELD_SEPARATOR', '$-', '$`', '$OUTPUT_RECORD_SEPARATOR', '$.', '$a', '$PERL_VERSION', '$/', '$ACCUMULATOR', '$PERLDB', '$0', '$ARG', '$PID', '$:', '$ARGV', '$POSTMATCH', '$;', '$b', '$PREMATCH', '$<', '$BASETIME', '$PROCESS_ID', '$=', '$CHILD_ERROR', '$PROGRAM_NAME', '$>', '$COMPILING', '$REAL_GROUP_ID', '$?', '$DEBUGGING', '$REAL_USER_ID', '$@', '$EFFECTIVE_GROUP_ID', '$RS', '$[', '$EFFECTIVE_USER_ID', '$SUBSCRIPT_SEPARATOR', '$\\\\', '$EGID', '$SUBSEP', '$]', '$ERRNO', '$SYSTEM_FD_MAX', '$^', '$EUID', '$UID', '$^A', '$EVAL_ERROR', '$WARNING', '$^C', '$EXCEPTIONS_BEING_CAUGHT', '$|', '$^CHILD_ERROR_NATIVE', '$EXECUTABLE_NAME', '$~', '$^D', '$EXTENDED_OS_ERROR', '%!', '$^E', '$FORMAT_FORMFEED', '%^H', '$^ENCODING', '$FORMAT_LINE_BREAK_CHARACTERS', '%ENV', '$^F', '$FORMAT_LINES_LEFT', '%INC', '$^H', '$FORMAT_LINES_PER_PAGE', '%OVERLOAD', '$^I', '$FORMAT_NAME', '%SIG', '$^L', '$FORMAT_PAGE_NUMBER', '@+', '$^M', '$FORMAT_TOP_NAME', '@-', '$^N', '$GID', '@_', '$^O', '$INPLACE_EDIT', '@ARGV', '$^OPEN', '$INPUT_LINE_NUMBER', '@INC', '$^P', '$INPUT_RECORD_SEPARATOR', '@LAST_MATCH_START', '$^R', '$LAST_MATCH_END', '$^RE_DEBUG_FLAGS', '$LAST_PAREN_MATCH'],\n  // operators\n  symbols: /[:+\\-\\^*$&%@=<>!?|\\/~\\.]/,\n  quoteLikeOps: ['qr', 'm', 's', 'q', 'qq', 'qx', 'qw', 'tr', 'y'],\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, [/[a-zA-Z\\-_][\\w\\-_]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@builtinFunctions': 'type.identifier',\n        '@builtinFileHandlers': 'variable.predefined',\n        '@quoteLikeOps': {\n          token: '@rematch',\n          next: 'quotedConstructs'\n        },\n        '@default': ''\n      }\n    }], // Perl variables\n    [/[\\$@%][*@#?\\+\\-\\$!\\w\\\\\\^><~:;\\.]+/, {\n      cases: {\n        '@builtinVariables': 'variable.predefined',\n        '@default': 'variable'\n      }\n    }], {\n      include: '@strings'\n    }, {\n      include: '@dblStrings'\n    }, // Perl Doc\n    {\n      include: '@perldoc'\n    }, // Here Doc\n    {\n      include: '@heredoc'\n    }, [/[{}\\[\\]()]/, '@brackets'], // RegExp\n    [/[\\/](?:(?:\\[(?:\\\\]|[^\\]])+\\])|(?:\\\\\\/|[^\\]\\/]))*[\\/]\\w*\\s*(?=[).,;]|$)/, 'regexp'], [/@symbols/, 'operators'], {\n      include: '@numbers'\n    }, [/[,;]/, 'delimiter']],\n    whitespace: [[/\\s+/, 'white'], [/(^#!.*$)/, 'metatag'], [/(^#.*$)/, 'comment']],\n    numbers: [[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+/, 'number']],\n    // Single quote string\n    strings: [[/'/, 'string', '@stringBody']],\n    stringBody: [[/'/, 'string', '@popall'], [/\\\\'/, 'string.escape'], [/./, 'string']],\n    // Double quote string\n    dblStrings: [[/\"/, 'string', '@dblStringBody']],\n    dblStringBody: [[/\"/, 'string', '@popall'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], {\n      include: '@variables'\n    }, [/./, 'string']],\n    // Quoted constructs\n    // Percent strings in Ruby are similar to quote-like operators in Perl.\n    // This is adapted from pstrings in ../ruby/ruby.ts.\n    quotedConstructs: [[/(q|qw|tr|y)\\s*\\(/, {\n      token: 'string.delim',\n      switchTo: '@qstring.(.)'\n    }], [/(q|qw|tr|y)\\s*\\[/, {\n      token: 'string.delim',\n      switchTo: '@qstring.[.]'\n    }], [/(q|qw|tr|y)\\s*\\{/, {\n      token: 'string.delim',\n      switchTo: '@qstring.{.}'\n    }], [/(q|qw|tr|y)\\s*</, {\n      token: 'string.delim',\n      switchTo: '@qstring.<.>'\n    }], [/(q|qw|tr|y)#/, {\n      token: 'string.delim',\n      switchTo: '@qstring.#.#'\n    }], [/(q|qw|tr|y)\\s*([^A-Za-z0-9#\\s])/, {\n      token: 'string.delim',\n      switchTo: '@qstring.$2.$2'\n    }], [/(q|qw|tr|y)\\s+(\\w)/, {\n      token: 'string.delim',\n      switchTo: '@qstring.$2.$2'\n    }], [/(qr|m|s)\\s*\\(/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.(.)'\n    }], [/(qr|m|s)\\s*\\[/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.[.]'\n    }], [/(qr|m|s)\\s*\\{/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.{.}'\n    }], [/(qr|m|s)\\s*</, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.<.>'\n    }], [/(qr|m|s)#/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.#.#'\n    }], [/(qr|m|s)\\s*([^A-Za-z0-9_#\\s])/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.$2.$2'\n    }], [/(qr|m|s)\\s+(\\w)/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.$2.$2'\n    }], [/(qq|qx)\\s*\\(/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.(.)'\n    }], [/(qq|qx)\\s*\\[/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.[.]'\n    }], [/(qq|qx)\\s*\\{/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.{.}'\n    }], [/(qq|qx)\\s*</, {\n      token: 'string.delim',\n      switchTo: '@qqstring.<.>'\n    }], [/(qq|qx)#/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.#.#'\n    }], [/(qq|qx)\\s*([^A-Za-z0-9#\\s])/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.$2.$2'\n    }], [/(qq|qx)\\s+(\\w)/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.$2.$2'\n    }]],\n    // Non-expanded quoted string\n    // qstring<open>.<close>\n    //  open = open delimiter\n    //  close = close delimiter\n    qstring: [[/\\\\./, 'string.escape'], [/./, {\n      cases: {\n        '$#==$S3': {\n          token: 'string.delim',\n          next: '@pop'\n        },\n        '$#==$S2': {\n          token: 'string.delim',\n          next: '@push'\n        },\n        '@default': 'string'\n      }\n    }]],\n    // Quoted regexp\n    // qregexp.<open>.<close>\n    //  open = open delimiter\n    //  close = close delimiter\n    qregexp: [{\n      include: '@variables'\n    }, [/\\\\./, 'regexp.escape'], [/./, {\n      cases: {\n        '$#==$S3': {\n          token: 'regexp.delim',\n          next: '@regexpModifiers'\n        },\n        '$#==$S2': {\n          token: 'regexp.delim',\n          next: '@push'\n        },\n        '@default': 'regexp'\n      }\n    }]],\n    regexpModifiers: [[/[msixpodualngcer]+/, {\n      token: 'regexp.modifier',\n      next: '@popall'\n    }]],\n    // Expanded quoted string\n    // qqstring.<open>.<close>\n    //  open = open delimiter\n    //  close = close delimiter\n    qqstring: [{\n      include: '@variables'\n    }, {\n      include: '@qstring'\n    }],\n    heredoc: [[/<<\\s*['\"`]?([\\w\\-]+)['\"`]?/, {\n      token: 'string.heredoc.delimiter',\n      next: '@heredocBody.$1'\n    }]],\n    heredocBody: [[/^([\\w\\-]+)$/, {\n      cases: {\n        '$1==$S2': [{\n          token: 'string.heredoc.delimiter',\n          next: '@popall'\n        }],\n        '@default': 'string.heredoc'\n      }\n    }], [/./, 'string.heredoc']],\n    perldoc: [[/^=\\w/, 'comment.doc', '@perldocBody']],\n    perldocBody: [[/^=cut\\b/, 'type.identifier', '@popall'], [/./, 'comment.doc']],\n    variables: [[/\\$\\w+/, 'variable'], [/@\\w+/, 'variable'], [/%\\w+/, 'variable']]\n  }\n};"],"sourceRoot":""}