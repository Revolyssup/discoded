{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/apex/apex.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","keywordsWithCaseVariations","forEach","lowercase","push","toUpperCase","charAt","substr","uppercaseFirstLetter","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","@keywords","token","@default","include","@operators","whitespace","comment","apexdoc","string","$#==$S2","next"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CAEPE,YAAA,qFACAC,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,sDACAC,IAAA,IAAAD,OAAA,2DAWAE,EAAA,GAPA,ovCAQAC,QAAA,SAAAC,GACAF,EAAAG,KAAAD,GACAF,EAAAG,KAAAD,EAAAE,eACAJ,EAAAG,KARA,SAAAD,GACA,OAAAA,EAAAG,OAAA,GAAAD,cAAAF,EAAAI,OAAA,GAOAC,CAAAL,MAEO,IAAAjB,EAAA,CACPuB,aAAA,GACAC,aAAA,QACAC,SAAAV,EACAW,UAAA,iLAEAC,QAAA,wBACAC,QAAA,wEACAC,OAAA,cACAC,YAAA,oBACAC,aAAA,oBACAC,UAAA,iCAEAC,UAAA,CACAC,KAAA,CACA,kBACAC,MAAA,CACAC,YAAA,CACAC,MAAA,cAEAC,WAAA,gBAGA,iBACAH,MAAA,CACAC,YAAA,CACAC,MAAA,cAEAC,WAAA,qBAGA,CACAC,QAAA,eAEA,cAAS,2DACTJ,MAAA,CACAK,aAAA,YACAF,WAAA,MAGA,wCACA,8LACA,SAAQ,aACR,gIACA,uGACAG,WAAA,kHACAC,QAAA,uBAEA,+CAEAC,QAAA,kFACAC,OAAA,6FACAT,MAAA,CACAU,UAAA,CACAR,MAAA,SACAS,KAAA,QAEAR,WAAA","file":"static/js/9.71877d13.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '<',\n    close: '>'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\n    }\n  }\n};\nvar keywords = ['abstract', 'activate', 'and', 'any', 'array', 'as', 'asc', 'assert', 'autonomous', 'begin', 'bigdecimal', 'blob', 'boolean', 'break', 'bulk', 'by', 'case', 'cast', 'catch', 'char', 'class', 'collect', 'commit', 'const', 'continue', 'convertcurrency', 'decimal', 'default', 'delete', 'desc', 'do', 'double', 'else', 'end', 'enum', 'exception', 'exit', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'from', 'future', 'get', 'global', 'goto', 'group', 'having', 'hint', 'if', 'implements', 'import', 'in', 'inner', 'insert', 'instanceof', 'int', 'interface', 'into', 'join', 'last_90_days', 'last_month', 'last_n_days', 'last_week', 'like', 'limit', 'list', 'long', 'loop', 'map', 'merge', 'native', 'new', 'next_90_days', 'next_month', 'next_n_days', 'next_week', 'not', 'null', 'nulls', 'number', 'object', 'of', 'on', 'or', 'outer', 'override', 'package', 'parallel', 'pragma', 'private', 'protected', 'public', 'retrieve', 'return', 'returning', 'rollback', 'savepoint', 'search', 'select', 'set', 'short', 'sort', 'stat', 'static', 'strictfp', 'super', 'switch', 'synchronized', 'system', 'testmethod', 'then', 'this', 'this_month', 'this_week', 'throw', 'throws', 'today', 'tolabel', 'tomorrow', 'transaction', 'transient', 'trigger', 'true', 'try', 'type', 'undelete', 'update', 'upsert', 'using', 'virtual', 'void', 'volatile', 'webservice', 'when', 'where', 'while', 'yesterday']; // create case variations of the keywords - apex is case insensitive, but we can't make the highlighter case insensitive\n// because we use a heuristic to assume that identifiers starting with an upper case letter are types.\n\nvar uppercaseFirstLetter = function uppercaseFirstLetter(lowercase) {\n  return lowercase.charAt(0).toUpperCase() + lowercase.substr(1);\n};\n\nvar keywordsWithCaseVariations = [];\nkeywords.forEach(function (lowercase) {\n  keywordsWithCaseVariations.push(lowercase);\n  keywordsWithCaseVariations.push(lowercase.toUpperCase());\n  keywordsWithCaseVariations.push(uppercaseFirstLetter(lowercase));\n});\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.apex',\n  keywords: keywordsWithCaseVariations,\n  operators: ['=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=', '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=', '%=', '<<=', '>>=', '>>>='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // assume that identifiers starting with an uppercase letter are types\n    [/[A-Z][\\w\\$]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'type.identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // @ annotations.\n    [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'], [/(@digits)[fFdD]/, 'number.float'], [/(@digits)[lL]?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string.\"'], [/'/, 'string', '@string.\\''], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@apexdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n    // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n    [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    //Identical copy of comment above, except for the addition of .doc\n    apexdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    string: [[/[^\\\\\"']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }]]\n  }\n};"],"sourceRoot":""}