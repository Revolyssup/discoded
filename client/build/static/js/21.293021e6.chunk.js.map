{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","offSide","defaultToken","tokenPostfix","keywords","typeKeywords","directiveLocations","operators","symbols","escapes","tokenizer","root","cases","@keywords","@default","@typeKeywords","include","@operators","token","log","next","nextEmbedded","bracket","mlstring","string","whitespace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,MACAC,MAAA,MACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,uBAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,MACAC,MAAA,OACG,CACHD,KAAA,IACAC,MAAA,MAEAG,QAAA,CACAC,SAAA,IAGOV,EAAA,CAEPW,aAAA,UACAC,aAAA,OACAC,SAAA,wKACAC,aAAA,wCACAC,mBAAA,gRACAC,UAAA,0BAEAC,QAAA,YAEAC,QAAA,qCAEAC,UAAA,CACAC,KAAA,CACA,iBACAC,MAAA,CACAC,YAAA,UACAC,WAAA,oBAGA,cACAF,MAAA,CACAC,YAAA,UACAC,WAAA,yBAGA,iBACAF,MAAA,CACAG,gBAAA,UACAD,WAAA,qBAGA,CACAE,QAAA,eAEA,cAAS,0BACTJ,MAAA,CACAK,aAAA,WACAH,WAAA,MAKA,2BACAI,MAAA,aACAC,IAAA,yBAEA,gGACA,SAAQ,qBACRD,MAAA,SACAE,KAAA,YACAC,aAAA,aAEA,2CACAH,MAAA,eACAI,QAAA,QACAF,KAAA,aAEAG,SAAA,4BACAL,MAAA,SACAE,KAAA,OACAC,aAAA,UAEAG,OAAA,yFACAN,MAAA,eACAI,QAAA,SACAF,KAAA,UAEAK,WAAA","file":"static/js/21.293021e6.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"\"\"',\n    close: '\"\"\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"\"\"',\n    close: '\"\"\"'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  folding: {\n    offSide: true\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.gql',\n  keywords: ['null', 'true', 'false', 'query', 'mutation', 'subscription', 'extend', 'schema', 'directive', 'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements', 'fragment', 'on'],\n  typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\n  directiveLocations: ['SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION', 'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION', 'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION', 'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION'],\n  operators: ['=', '!', '?', ':', '&', '|'],\n  // we include these common regular expressions\n  symbols: /[=!?:&|]+/,\n  // https://facebook.github.io/graphql/draft/#sec-String-Value\n  escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// fields and argument names\n    [/[a-z_][\\w$]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'key.identifier'\n      }\n    }], // identify typed input variables\n    [/[$][\\w$]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'argument.identifier'\n      }\n    }], // to show class names nicely\n    [/[A-Z][\\w\\$]*/, {\n      cases: {\n        '@typeKeywords': 'keyword',\n        '@default': 'type.identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': ''\n      }\n    }], // @ annotations.\n    // As an example, we emit a debugging log message on these tokens.\n    // Note: message are supressed during the first load -- change some lines to see them.\n    [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, {\n      token: 'annotation',\n      log: 'annotation token: $0'\n    }], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], [/\"\"\"/, {\n      token: 'string',\n      next: '@mlstring',\n      nextEmbedded: 'markdown'\n    }], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string'\n    }]],\n    mlstring: [[/[^\"]+/, 'string'], ['\"\"\"', {\n      token: 'string',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/#.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}