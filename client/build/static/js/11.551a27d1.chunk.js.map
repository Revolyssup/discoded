{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/bat/bat.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","ignoreCase","tokenPostfix","token","keywords","symbols","escapes","tokenizer","root","string","cases","@eos","next","@default","$#==$S2"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,OAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,gCACAC,IAAA,IAAAD,OAAA,sCAIOX,EAAA,CACPa,aAAA,GACAC,YAAA,EACAC,aAAA,OACAZ,SAAA,EACAa,MAAA,oBACAX,KAAA,IACAC,MAAA,KACG,CACHU,MAAA,wBACAX,KAAA,IACAC,MAAA,KACG,CACHU,MAAA,mBACAX,KAAA,IACAC,MAAA,MAEAW,SAAA,4FAEAC,QAAA,0BACAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,sEACAL,MAAA,WACK,CACLA,MAAA,gBAEA,kBACA,oFACA,oBACA,mBACA,oDACA,cAAS,sCACT,4GACA,SAAQ,aACR,uDACAM,OAAA,eACAC,MAAA,CACAC,OAAA,CACAR,MAAA,SACAS,KAAA,WAEAC,WAAA,YAEK,2HACLH,MAAA,CACAI,UAAA,CACAX,MAAA,SACAS,KAAA,QAEAC,WAAA,YAEK","file":"static/js/11.551a27d1.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: 'REM'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|REM\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|REM\\\\s+)#endregion\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.bat',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: /call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,\n  // we include these common regular expressions\n  symbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/^(\\s*)(rem(?:\\s.*|))$/, ['', 'comment']], [/(\\@?)(@keywords)(?!\\w)/, [{\n      token: 'keyword'\n    }, {\n      token: 'keyword.$2'\n    }]], // whitespace\n    [/[ \\t\\r\\n]+/, ''], // blocks\n    [/setlocal(?!\\w)/, 'keyword.tag-setlocal'], [/endlocal(?!\\w)/, 'keyword.tag-setlocal'], // words\n    [/[a-zA-Z_]\\w*/, ''], // labels\n    [/:\\w*/, 'metatag'], // variables\n    [/%[^%]+%/, 'variable'], [/%%[\\w]+(?!\\w)/, 'variable'], // punctuations\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, 'delimiter'], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+/, 'number'], // punctuation: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings:\n    [/\"/, 'string', '@string.\"'], [/'/, 'string', '@string.\\'']],\n    string: [[/[^\\\\\"'%]+/, {\n      cases: {\n        '@eos': {\n          token: 'string',\n          next: '@popall'\n        },\n        '@default': 'string'\n      }\n    }], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/%[\\w ]+%/, 'variable'], [/%%[\\w]+(?!\\w)/, 'variable'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/$/, 'string', '@popall']]\n  }\n};"],"sourceRoot":""}