{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/php/php.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","phpInSimpleState","include","phpInEmbeddedState","phpRoot","cases","@phpKeywords","@phpCompileTimeConstants","@default","@phpPreDefinedVariables","phpComment","phpLineComment","phpDoubleQuoteString","phpSingleQuoteString","phpKeywords","phpCompileTimeConstants","phpPreDefinedVariables","escapes"],"mappings":"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","file":"static/js/38.14ce42e4.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}',\n    notIn: ['string']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(#|\\/\\/)region\\\\b\"),\n      end: new RegExp(\"^\\\\s*(#|\\/\\/)endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '',\n  // ignoreCase: true,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.root'\n    }], [/<!DOCTYPE/, 'metatag.html', '@doctype'], [/<!--/, 'comment.html', '@comment'], [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']], [/(<)(script)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@script'\n    }]], [/(<)(style)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@style'\n    }]], [/(<)([:\\w]+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/(<\\/)(\\w+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/</, 'delimiter.html'], [/[^<]+/] // text\n    ],\n    doctype: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.comment'\n    }], [/[^>]+/, 'metatag.content.html'], [/>/, 'metatag.html', '@pop']],\n    comment: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.comment'\n    }], [/-->/, 'comment.html', '@pop'], [/[^-]+/, 'comment.content.html'], [/./, 'comment.content.html']],\n    otherTag: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.otherTag'\n    }], [/\\/?>/, 'delimiter.html', '@pop'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/]],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.script'\n    }], [/type/, 'attribute.name', '@scriptAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <script ... type\n    scriptAfterType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.scriptAfterType'\n    }], [/=/, 'delimiter', '@scriptAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type =\n    scriptAfterTypeEquals: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.scriptAfterTypeEquals'\n    }], [/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type = $S2\n    scriptWithCustomType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.scriptWithCustomType.$S2'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    scriptEmbedded: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInEmbeddedState.scriptEmbedded.$S2',\n      nextEmbedded: '@pop'\n    }], [/<\\/script/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.style'\n    }], [/type/, 'attribute.name', '@styleAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <style ... type\n    styleAfterType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.styleAfterType'\n    }], [/=/, 'delimiter', '@styleAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type =\n    styleAfterTypeEquals: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.styleAfterTypeEquals'\n    }], [/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type = $S2\n    styleWithCustomType: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInSimpleState.styleWithCustomType.$S2'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    styleEmbedded: [[/<\\?((php)|=)?/, {\n      token: '@rematch',\n      switchTo: '@phpInEmbeddedState.styleEmbedded.$S2',\n      nextEmbedded: '@pop'\n    }], [/<\\/style/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    // -- END <style> tags handling\n    phpInSimpleState: [[/<\\?((php)|=)?/, 'metatag.php'], [/\\?>/, {\n      token: 'metatag.php',\n      switchTo: '@$S2.$S3'\n    }], {\n      include: 'phpRoot'\n    }],\n    phpInEmbeddedState: [[/<\\?((php)|=)?/, 'metatag.php'], [/\\?>/, {\n      token: 'metatag.php',\n      switchTo: '@$S2.$S3',\n      nextEmbedded: '$S3'\n    }], {\n      include: 'phpRoot'\n    }],\n    phpRoot: [[/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@phpKeywords': {\n          token: 'keyword.php'\n        },\n        '@phpCompileTimeConstants': {\n          token: 'constant.php'\n        },\n        '@default': 'identifier.php'\n      }\n    }], [/[$a-zA-Z_]\\w*/, {\n      cases: {\n        '@phpPreDefinedVariables': {\n          token: 'variable.predefined.php'\n        },\n        '@default': 'variable.php'\n      }\n    }], // brackets\n    [/[{}]/, 'delimiter.bracket.php'], [/[\\[\\]]/, 'delimiter.array.php'], [/[()]/, 'delimiter.parenthesis.php'], // whitespace\n    [/[ \\t\\r\\n]+/], // comments\n    [/(#|\\/\\/)$/, 'comment.php'], [/(#|\\/\\/)/, 'comment.php', '@phpLineComment'], // block comments\n    [/\\/\\*/, 'comment.php', '@phpComment'], // strings\n    [/\"/, 'string.php', '@phpDoubleQuoteString'], [/'/, 'string.php', '@phpSingleQuoteString'], // delimiters\n    [/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,\\@]/, 'delimiter.php'], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float.php'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float.php'], [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.php'], [/0[0-7']*[0-7]/, 'number.octal.php'], [/0[bB][0-1']*[0-1]/, 'number.binary.php'], [/\\d[\\d']*/, 'number.php'], [/\\d/, 'number.php']],\n    phpComment: [[/\\*\\//, 'comment.php', '@pop'], [/[^*]+/, 'comment.php'], [/./, 'comment.php']],\n    phpLineComment: [[/\\?>/, {\n      token: '@rematch',\n      next: '@pop'\n    }], [/.$/, 'comment.php', '@pop'], [/[^?]+$/, 'comment.php', '@pop'], [/[^?]+/, 'comment.php'], [/./, 'comment.php']],\n    phpDoubleQuoteString: [[/[^\\\\\"]+/, 'string.php'], [/@escapes/, 'string.escape.php'], [/\\\\./, 'string.escape.invalid.php'], [/\"/, 'string.php', '@pop']],\n    phpSingleQuoteString: [[/[^\\\\']+/, 'string.php'], [/@escapes/, 'string.escape.php'], [/\\\\./, 'string.escape.invalid.php'], [/'/, 'string.php', '@pop']]\n  },\n  phpKeywords: ['abstract', 'and', 'array', 'as', 'break', 'callable', 'case', 'catch', 'cfunction', 'class', 'clone', 'const', 'continue', 'declare', 'default', 'do', 'else', 'elseif', 'enddeclare', 'endfor', 'endforeach', 'endif', 'endswitch', 'endwhile', 'extends', 'false', 'final', 'for', 'foreach', 'function', 'global', 'goto', 'if', 'implements', 'interface', 'instanceof', 'insteadof', 'namespace', 'new', 'null', 'object', 'old_function', 'or', 'private', 'protected', 'public', 'resource', 'static', 'switch', 'throw', 'trait', 'try', 'true', 'use', 'var', 'while', 'xor', 'die', 'echo', 'empty', 'exit', 'eval', 'include', 'include_once', 'isset', 'list', 'require', 'require_once', 'return', 'print', 'unset', 'yield', '__construct'],\n  phpCompileTimeConstants: ['__CLASS__', '__DIR__', '__FILE__', '__LINE__', '__NAMESPACE__', '__METHOD__', '__FUNCTION__', '__TRAIT__'],\n  phpPreDefinedVariables: ['$GLOBALS', '$_SERVER', '$_GET', '$_POST', '$_FILES', '$_REQUEST', '$_SESSION', '$_ENV', '$_COOKIE', '$php_errormsg', '$HTTP_RAW_POST_DATA', '$http_response_header', '$argc', '$argv'],\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/\n};"],"sourceRoot":""}