{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","@keywords","@default","next","$S2==interpolatedstring","@eos","string","$S2==\"","$#==$S2","herestring","$1==$S2","comment","hereregexp"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,YAAA,wFACAC,SAAA,CACAC,aAAA,cACAC,YAAA,KAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,mBACAC,IAAA,IAAAD,OAAA,yBAIOb,EAAA,CACPe,aAAA,GACAC,YAAA,EACAC,aAAA,UACAZ,SAAA,EACAE,KAAA,IACAC,MAAA,IACAU,MAAA,mBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,oBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,0BAEAC,MAAA,qCACAC,SAAA,qUAEAC,QAAA,4BACAC,QAAA,yEAEAC,UAAA,CACAC,KAAA,CACA,0DACAC,MAAA,CACAC,KAAA,sBACAC,YAAA,CACAT,MAAA,cAEAU,WAAA,MAGA,kBACA,gDACA,QACAV,MAAA,SACAW,KAAA,gBACK,seAAggB,gDAAoD,kBACzjB,KAAO,CACPJ,MAAA,CACAK,0BAAA,CACAZ,MAAA,SACAW,KAAA,QAEAD,WAAA,eAEK,cAAQ,sCACb,wKACA,qBACA,4EACAH,MAAA,CACAM,OAAA,SACAH,WAAA,CACAV,MAAA,SACAW,KAAA,gBAGK,MACLJ,MAAA,CACAM,OAAA,SACAH,WAAA,CACAV,MAAA,SACAW,KAAA,iBAIAG,OAAA,0HAA4I,CAC5IP,MAAA,CACAQ,SAAA,CACAf,MAAA,SACAW,KAAA,2BAEAD,WAAA,YAEK,SACLH,MAAA,CACAS,UAAA,CACAhB,MAAA,SACAW,KAAA,QAEAD,WAAA,YAEK,gBACLO,WAAA,eACAV,MAAA,CACAW,UAAA,CACAlB,MAAA,SACAW,KAAA,QAEAD,WAAA,YAEK,4GAAqH,CAC1HV,MAAA,eACAW,KAAA,4BACK,gBACLQ,QAAA,+DACAC,WAAA,0EACApB,MAAA,SACAW,KAAA,SACK","file":"static/js/14.b28b7404.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: ['###', '###'],\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.coffee',\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: ['and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off', 'true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super', 'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'],\n  // we include these common regular expressions\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        'this': 'variable.predefined',\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': ''\n      }\n    }], // whitespace\n    [/[ \\t\\r\\n]+/, ''], // Comments\n    [/###/, 'comment', '@comment'], [/#.*$/, 'comment'], // regular expressions\n    ['///', {\n      token: 'regexp',\n      next: '@hereregexp'\n    }], [/^(\\s*)(@regEx)/, ['', 'regexp']], [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']], [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']], [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']], [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']], // delimiters\n    [/}/, {\n      cases: {\n        '$S2==interpolatedstring': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': '@brackets'\n      }\n    }], [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, 'delimiter'], // numbers\n    [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/0[0-7]+(?!\\d)/, 'number.octal'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[,.]/, 'delimiter'], // strings:\n    [/\"\"\"/, 'string', '@herestring.\"\"\"'], [/'''/, 'string', '@herestring.\\'\\'\\''], [/\"/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: '@string.\\''\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: 'string',\n          next: 'root.interpolatedstring'\n        },\n        '@default': 'string'\n      }\n    }], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/#/, 'string']],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        '$1==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/[^#\\\\'\"]+/, 'string'], [/['\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      token: 'string.quote',\n      next: 'root.interpolatedstring'\n    }], [/#/, 'string']],\n    comment: [[/[^#]+/, 'comment'], [/###/, 'comment', '@pop'], [/#/, 'comment']],\n    hereregexp: [[/[^\\\\\\/#]+/, 'regexp'], [/\\\\./, 'regexp'], [/#.*$/, 'comment'], ['///[igm]*', {\n      token: 'regexp',\n      next: '@pop'\n    }], [/\\//, 'regexp']]\n  }\n};"],"sourceRoot":""}