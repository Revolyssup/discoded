{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/tcl/tcl.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","brackets","autoClosingPairs","open","close","surroundingPairs","tokenPostfix","specialFunctions","mainFunctions","builtinFunctions","symbols","token","escapes","variables","tokenizer","root","cases","@specialFunctions","next","@mainFunctions","@builtinFunctions","@default","include","bracket","dstring","sstring","whitespace","newlineComment","nestedVariable","nestedCall","specialFunc"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGOJ,EAAA,CACPM,aAAA,OACAC,iBAAA,gHACAC,cAAA,6JACAC,iBAAA,svBACAC,QAAA,wBACAT,SAAA,EACAE,KAAA,IACAC,MAAA,IACAO,MAAA,yBACG,CACHR,KAAA,IACAC,MAAA,IACAO,MAAA,mBACG,CACHR,KAAA,IACAC,MAAA,IACAO,MAAA,qBAEAC,QAAA,mFACAC,UAAA,qCACAC,UAAA,CACAC,KAAA,CACA,iBACAC,MAAA,CACAC,oBAAA,CACAN,MAAA,eACAO,KAAA,gBAEAC,iBAAA,UACAC,oBAAA,WACAC,WAAA,mBAEK,2BAA4B,WACjC,CACAC,QAAA,eAEA,cAAS,uDAAkE,CAC3EX,MAAA,aACAO,KAAA,oBACK,uEACL,0CACA,KAAO,aACP,MACAP,MAAA,eACAY,QAAA,QACAL,KAAA,aACK,MACLP,MAAA,eACAY,QAAA,QACAL,KAAA,cAEAM,QAAA,QACAb,MAAA,YACAO,KAAA,gBACK,kBAAmB,CACxBP,MAAA,aACAO,KAAA,oBACK,8FACLP,MAAA,eACAY,QAAA,SACAL,KAAA,UAEAO,QAAA,QACAd,MAAA,YACAO,KAAA,gBACK,kBAAmB,CACxBP,MAAA,aACAO,KAAA,oBACK,8FACLP,MAAA,eACAY,QAAA,SACAL,KAAA,UAEAQ,WAAA,mCACAf,MAAA,UACAO,KAAA,oBACK,0BACLS,eAAA,mCACAhB,MAAA,UACAO,KAAA,UAEAU,eAAA,eAA6B,yBAA+B,CAC5DjB,MAAA,aACAO,KAAA,UAEAW,WAAA,QACAlB,MAAA,YACAO,KAAA,gBACK,OACLP,MAAA,YACAO,KAAA,SACK,CACLI,QAAA,SAEAQ,YAAA,OACAnB,MAAA,SACAO,KAAA,aACK,MACLP,MAAA,SACAO,KAAA,aACK,QACLP,MAAA,OACAO,KAAA","file":"static/js/60.01be8817.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }]\n};\nexport var language = {\n  tokenPostfix: '.tcl',\n  specialFunctions: ['set', 'unset', 'rename', 'variable', 'proc', 'coroutine', 'foreach', 'incr', 'append', 'lappend', 'linsert', 'lreplace'],\n  mainFunctions: ['if', 'then', 'elseif', 'else', 'case', 'switch', 'while', 'for', 'break', 'continue', 'return', 'package', 'namespace', 'catch', 'exit', 'eval', 'expr', 'uplevel', 'upvar'],\n  builtinFunctions: ['file', 'info', 'concat', 'join', 'lindex', 'list', 'llength', 'lrange', 'lsearch', 'lsort', 'split', 'array', 'parray', 'binary', 'format', 'regexp', 'regsub', 'scan', 'string', 'subst', 'dict', 'cd', 'clock', 'exec', 'glob', 'pid', 'pwd', 'close', 'eof', 'fblocked', 'fconfigure', 'fcopy', 'fileevent', 'flush', 'gets', 'open', 'puts', 'read', 'seek', 'socket', 'tell', 'interp', 'after', 'auto_execok', 'auto_load', 'auto_mkindex', 'auto_reset', 'bgerror', 'error', 'global', 'history', 'load', 'source', 'time', 'trace', 'unknown', 'unset', 'update', 'vwait', 'winfo', 'wm', 'bind', 'event', 'pack', 'place', 'grid', 'font', 'bell', 'clipboard', 'destroy', 'focus', 'grab', 'lower', 'option', 'raise', 'selection', 'send', 'tk', 'tkwait', 'tk_bisque', 'tk_focusNext', 'tk_focusPrev', 'tk_focusFollowsMouse', 'tk_popup', 'tk_setPalette'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  brackets: [{\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }],\n  escapes: /\\\\(?:[abfnrtv\\\\\"'\\[\\]\\{\\};\\$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  variables: /(?:\\$+(?:(?:\\:\\:?)?[a-zA-Z_]\\w*)+)/,\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@specialFunctions': {\n          token: 'keyword.flow',\n          next: '@specialFunc'\n        },\n        '@mainFunctions': 'keyword',\n        '@builtinFunctions': 'variable',\n        '@default': 'operator.scss'\n      }\n    }], [/\\s+\\-+(?!\\d|\\.)\\w*|{\\*}/, 'metatag'], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, 'operator'], [/\\$+(?:\\:\\:)?\\{/, {\n      token: 'identifier',\n      next: '@nestedVariable'\n    }], [/@variables/, 'type.identifier'], [/\\.(?!\\d|\\.)[\\w\\-]*/, 'operator.sql'], // numbers\n    [/\\d+(\\.\\d+)?/, 'number'], [/\\d+/, 'number'], // delimiter\n    [/;/, 'delimiter'], // strings\n    [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@dstring'\n    }], [/'/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@sstring'\n    }]],\n    dstring: [[/\\[/, {\n      token: '@brackets',\n      next: '@nestedCall'\n    }], [/\\$+(?:\\:\\:)?\\{/, {\n      token: 'identifier',\n      next: '@nestedVariable'\n    }], [/@variables/, 'type.identifier'], [/[^\\\\$\\[\\]\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    sstring: [[/\\[/, {\n      token: '@brackets',\n      next: '@nestedCall'\n    }], [/\\$+(?:\\:\\:)?\\{/, {\n      token: 'identifier',\n      next: '@nestedVariable'\n    }], [/@variables/, 'type.identifier'], [/[^\\\\$\\[\\]']+/, 'string'], [/@escapes/, 'string.escape'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/#.*\\\\$/, {\n      token: 'comment',\n      next: '@newlineComment'\n    }], [/#.*(?!\\\\)$/, 'comment']],\n    newlineComment: [[/.*\\\\$/, 'comment'], [/.*(?!\\\\)$/, {\n      token: 'comment',\n      next: '@pop'\n    }]],\n    nestedVariable: [[/[^\\{\\}\\$]+/, 'type.identifier'], [/\\}/, {\n      token: 'identifier',\n      next: '@pop'\n    }]],\n    nestedCall: [[/\\[/, {\n      token: '@brackets',\n      next: '@nestedCall'\n    }], [/\\]/, {\n      token: '@brackets',\n      next: '@pop'\n    }], {\n      include: 'root'\n    }],\n    specialFunc: [[/\"/, {\n      token: 'string',\n      next: '@dstring'\n    }], [/'/, {\n      token: 'string',\n      next: '@sstring'\n    }], [/\\S+/, {\n      token: 'type',\n      next: '@pop'\n    }]]\n  }\n};"],"sourceRoot":""}