{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/mips/mips.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","blockComment","lineComment","folding","markers","start","RegExp","end","defaultToken","ignoreCase","tokenPostfix","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","@keywords","token","@default","next","@eos","string","$S2==\"","$#==$S2","herestring","$1==$S2","comment","hereregexp"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,YAAA,wFACAC,SAAA,CACAC,aAAA,cACAC,YAAA,KAEAC,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,mBACAC,IAAA,IAAAD,OAAA,yBAIOR,EAAA,CACPU,aAAA,GACAC,YAAA,EACAC,aAAA,QACAC,MAAA,qCACAC,SAAA,oXAEAC,QAAA,WACAC,QAAA,yEAEAC,UAAA,CACAC,KAAA,CACA,2DACAC,MAAA,CACAC,KAAA,sBACAC,YAAA,CACAC,MAAA,cAEAC,WAAA,MAGA,kBACA,mBACA,QACAD,MAAA,SACAE,KAAA,gBACK,iIACL,yBACA,wKACA,qBACA,4EACAL,MAAA,CACAM,OAAA,SACAF,WAAA,CACAD,MAAA,SACAE,KAAA,gBAGK,MACLL,MAAA,CACAM,OAAA,SACAF,WAAA,CACAD,MAAA,SACAE,KAAA,iBAIAE,OAAA,0HAA4I,CAC5IP,MAAA,CACAQ,SAAA,CACAL,MAAA,SACAE,KAAA,2BAEAD,WAAA,YAEK,SACLJ,MAAA,CACAS,UAAA,CACAN,MAAA,SACAE,KAAA,QAEAD,WAAA,YAEK,gBACLM,WAAA,eACAV,MAAA,CACAW,UAAA,CACAR,MAAA,SACAE,KAAA,QAEAD,WAAA,YAEK,4GAAqH,CAC1HD,MAAA,eACAE,KAAA,4BACK,gBACLO,QAAA,sCACAC,WAAA,0EACAV,MAAA,SACAE,KAAA,SACK","file":"static/js/30.d02a406e.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: ['###', '###'],\n    lineComment: '#'\n  },\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: false,\n  tokenPostfix: '.mips',\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: ['.data', '.text', 'syscall', 'trap', 'add', 'addu', 'addi', 'addiu', 'and', 'andi', 'div', 'divu', 'mult', 'multu', 'nor', 'or', 'ori', 'sll', 'slv', 'sra', 'srav', 'srl', 'srlv', 'sub', 'subu', 'xor', 'xori', 'lhi', 'lho', 'lhi', 'llo', 'slt', 'slti', 'sltu', 'sltiu', 'beq', 'bgtz', 'blez', 'bne', 'j', 'jal', 'jalr', 'jr', 'lb', 'lbu', 'lh', 'lhu', 'lw', 'li', 'la', 'sb', 'sh', 'sw', 'mfhi', 'mflo', 'mthi', 'mtlo', 'move'],\n  // we include these common regular expressions\n  symbols: /[\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/\\$[a-zA-Z_]\\w*/, 'variable.predefined'], [/[.a-zA-Z_]\\w*/, {\n      cases: {\n        'this': 'variable.predefined',\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': ''\n      }\n    }], // whitespace\n    [/[ \\t\\r\\n]+/, ''], // Comments\n    [/#.*$/, 'comment'], // regular expressions\n    ['///', {\n      token: 'regexp',\n      next: '@hereregexp'\n    }], [/^(\\s*)(@regEx)/, ['', 'regexp']], [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], // delimiters\n    [/@symbols/, 'delimiter'], // numbers\n    [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/0[0-7]+(?!\\d)/, 'number.octal'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[,.]/, 'delimiter'], // strings:\n    [/\"\"\"/, 'string', '@herestring.\"\"\"'], [/'''/, 'string', '@herestring.\\'\\'\\''], [/\"/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: '@string.\\''\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: 'string',\n          next: 'root.interpolatedstring'\n        },\n        '@default': 'string'\n      }\n    }], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/#/, 'string']],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        '$1==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/[^#\\\\'\"]+/, 'string'], [/['\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      token: 'string.quote',\n      next: 'root.interpolatedstring'\n    }], [/#/, 'string']],\n    comment: [[/[^#]+/, 'comment'], [/#/, 'comment']],\n    hereregexp: [[/[^\\\\\\/#]+/, 'regexp'], [/\\\\./, 'regexp'], [/#.*$/, 'comment'], ['///[igm]*', {\n      token: 'regexp',\n      next: '@pop'\n    }], [/\\//, 'regexp']]\n  }\n};"],"sourceRoot":""}