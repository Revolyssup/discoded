{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","@namespaceFollows","next","@keywords","@default","include","$S2==interpolatedstring","$S2==litinterpstring","@operators","qualified","namespace","comment","string","litstring","litinterpstring","interpolatedstring","whitespace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,YAAA,uFACAC,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,uBAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAG,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,mBACAC,IAAA,IAAAD,OAAA,yBAIOd,EAAA,CACPgB,aAAA,GACAC,aAAA,MACAZ,SAAA,EACAE,KAAA,IACAC,MAAA,IACAU,MAAA,mBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,oBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,yBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,oBAEAC,SAAA,84BACAC,iBAAA,sBACAC,aAAA,+DACAC,UAAA,8JACAC,QAAA,wBAEAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,CACA,oBACAC,MAAA,CACAC,oBAAA,CACAV,MAAA,aACAW,KAAA,cAEAC,YAAA,CACAZ,MAAA,aACAW,KAAA,cAEAE,WAAA,CACAb,MAAA,aACAW,KAAA,iBAIA,CACAG,QAAA,eAEA,KAAO,CACPL,MAAA,CACAM,0BAAA,CACAf,MAAA,eACAW,KAAA,QAEAK,uBAAA,CACAhB,MAAA,eACAW,KAAA,QAEAE,WAAA,eAEK,cAAQ,2DACbJ,MAAA,CACAQ,aAAA,YACAJ,WAAA,MAGA,iJACA,SAAQ,aACR,2CACAb,MAAA,eACAW,KAAA,YACK,UACLX,MAAA,eACAW,KAAA,qBACK,QACLX,MAAA,eACAW,KAAA,eACK,QACLX,MAAA,eACAW,KAAA,wBAEA,uGACAO,UAAA,oBACAT,MAAA,CACAG,YAAA,CACAZ,MAAA,cAEAa,WAAA,gBAEK,mCACLM,UAAA,EACAL,QAAA,eACK,+DACLM,QAAA,uBACA,+CACAC,OAAA,yFACArB,MAAA,eACAW,KAAA,UAEAW,UAAA,iDACAtB,MAAA,eACAW,KAAA,UAEAY,gBAAA,WAA4B,uCAA6C,uBAAyB,sBAAwB,CAC1HvB,MAAA,eACAW,KAAA,yBACK,MACLX,MAAA,eACAW,KAAA,UAEAa,mBAAA,aAAiC,6EAAqF,uBAAyB,sBAAwB,CACvKxB,MAAA,eACAW,KAAA,4BACK,MACLX,MAAA,eACAW,KAAA,UAEAc,WAAA","file":"static/js/15.95a55ce4.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.cs',\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['extern', 'alias', 'using', 'bool', 'decimal', 'sbyte', 'byte', 'short', 'ushort', 'int', 'uint', 'long', 'ulong', 'char', 'float', 'double', 'object', 'dynamic', 'string', 'assembly', 'is', 'as', 'ref', 'out', 'this', 'base', 'new', 'typeof', 'void', 'checked', 'unchecked', 'default', 'delegate', 'var', 'const', 'if', 'else', 'switch', 'case', 'while', 'do', 'for', 'foreach', 'in', 'break', 'continue', 'goto', 'return', 'throw', 'try', 'catch', 'finally', 'lock', 'yield', 'from', 'let', 'where', 'join', 'on', 'equals', 'into', 'orderby', 'ascending', 'descending', 'select', 'group', 'by', 'namespace', 'partial', 'class', 'field', 'event', 'method', 'param', 'property', 'public', 'protected', 'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly', 'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove', 'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum', 'null', 'async', 'await', 'fixed', 'sizeof', 'stackalloc', 'unsafe', 'nameof', 'when'],\n  namespaceFollows: ['namespace', 'using'],\n  parenFollows: ['if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'],\n  operators: ['=', '??', '||', '&&', '|', '^', '&', '==', '!=', '<=', '>=', '<<', '+', '-', '*', '/', '%', '!', '~', '++', '--', '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '>>', '=>'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // escape sequences\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/\\@?[a-zA-Z_]\\w*/, {\n      cases: {\n        '@namespaceFollows': {\n          token: 'keyword.$0',\n          next: '@namespace'\n        },\n        '@keywords': {\n          token: 'keyword.$0',\n          next: '@qualified'\n        },\n        '@default': {\n          token: 'identifier',\n          next: '@qualified'\n        }\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/}/, {\n      cases: {\n        '$S2==interpolatedstring': {\n          token: 'string.quote',\n          next: '@pop'\n        },\n        '$S2==litinterpstring': {\n          token: 'string.quote',\n          next: '@pop'\n        },\n        '@default': '@brackets'\n      }\n    }], [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'], [/0[xX][0-9a-fA-F_]+/, 'number.hex'], [/0[bB][01_]+/, 'number.hex'], [/[0-9_]+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, {\n      token: 'string.quote',\n      next: '@string'\n    }], [/\\$\\@\"/, {\n      token: 'string.quote',\n      next: '@litinterpstring'\n    }], [/\\@\"/, {\n      token: 'string.quote',\n      next: '@litstring'\n    }], [/\\$\"/, {\n      token: 'string.quote',\n      next: '@interpolatedstring'\n    }], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    qualified: [[/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], [/\\./, 'delimiter'], ['', '', '@pop']],\n    namespace: [{\n      include: '@whitespace'\n    }, [/[A-Z]\\w*/, 'namespace'], [/[\\.=]/, 'delimiter'], ['', '', '@pop']],\n    comment: [[/[^\\/*]+/, 'comment'], // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n    ['\\\\*/', 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }]],\n    litstring: [[/[^\"]+/, 'string'], [/\"\"/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }]],\n    litinterpstring: [[/[^\"{]+/, 'string'], [/\"\"/, 'string.escape'], [/{{/, 'string.escape'], [/}}/, 'string.escape'], [/{/, {\n      token: 'string.quote',\n      next: 'root.litinterpstring'\n    }], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }]],\n    interpolatedstring: [[/[^\\\\\"{]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/{{/, 'string.escape'], [/}}/, 'string.escape'], [/{/, {\n      token: 'string.quote',\n      next: 'root.interpolatedstring'\n    }], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }]],\n    whitespace: [[/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, 'directive.csx'], [/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp'], [/[ \\t\\v\\f\\r\\n]+/, ''], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}