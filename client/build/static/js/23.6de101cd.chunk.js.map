{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/html/html.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_monaco","monaco","self","EMPTY_ELEMENTS","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","folding","markers","start","end","defaultToken","tokenPostfix","ignoreCase","tokenizer","root","token","next","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","switchTo","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMA,IAAAC,EAAA,qBAAAC,OAAAC,KAAAD,cAEAE,EAAA,uHACOL,EAAA,CACPM,YAAA,iFACAC,SAAA,CACAC,aAAA,sBAEAC,SAAA,qCAA6C,KAAK,WAClDC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,aAAA,EACAC,WAAA,IAAAC,OAAA,UAAAX,EAAAY,KAAA,yDACAC,UAAA,gCACAC,OAAA,CACAC,aAAAlB,EAAAmB,UAAAC,aAAAC,gBAEG,CACHR,WAAA,IAAAC,OAAA,UAAAX,EAAAY,KAAA,iDACAE,OAAA,CACAC,aAAAlB,EAAAmB,UAAAC,aAAAE,UAGAC,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAX,OAAA,sCACAY,IAAA,IAAAZ,OAAA,4CAIOf,EAAA,CACP4B,aAAA,GACAC,aAAA,QACAC,YAAA,EAEAC,UAAA,CACAC,KAAA,0KACAC,MAAA,MACAC,KAAA,aACK,4BACLD,MAAA,MACAC,KAAA,YACK,2CACLD,MAAA,MACAC,KAAA,eACK,6CACLD,MAAA,MACAC,KAAA,eACK,6BACLC,QAAA,qDACAC,QAAA,+EACAC,SAAA,4JAGAC,OAAA,mKACAL,MAAA,YACAC,KAAA,kBACAK,aAAA,oBACK,0DACLN,MAAA,YACAC,KAAA,WAGAM,gBAAA,kDACAP,MAAA,YACAC,KAAA,kBACAK,aAAA,oBACK,iCACLN,MAAA,WACAC,KAAA,UAGAO,sBAAA,eACAR,MAAA,kBACAS,SAAA,6BACK,cACLT,MAAA,kBACAS,SAAA,6BACK,MACLT,MAAA,YACAC,KAAA,kBACAK,aAAA,oBACK,iCACLN,MAAA,WACAC,KAAA,UAGAS,qBAAA,OACAV,MAAA,YACAC,KAAA,sBACAK,aAAA,QACK,gJACLN,MAAA,WACAC,KAAA,UAEAU,eAAA,eACAX,MAAA,WACAC,KAAA,OACAK,aAAA,SACK,cAILM,MAAA,kKACAZ,MAAA,YACAC,KAAA,iBACAK,aAAA,aACK,yDACLN,MAAA,YACAC,KAAA,WAGAY,eAAA,iDACAb,MAAA,YACAC,KAAA,iBACAK,aAAA,aACK,gCACLN,MAAA,WACAC,KAAA,UAGAa,qBAAA,eACAd,MAAA,kBACAS,SAAA,4BACK,cACLT,MAAA,kBACAS,SAAA,4BACK,MACLT,MAAA,YACAC,KAAA,iBACAK,aAAA,aACK,gCACLN,MAAA,WACAC,KAAA,UAGAc,oBAAA,OACAf,MAAA,YACAC,KAAA,qBACAK,aAAA,QACK,+IACLN,MAAA,WACAC,KAAA,UAEAe,cAAA,cACAhB,MAAA,WACAC,KAAA,OACAK,aAAA,SACK","file":"static/js/23.6de101cd.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: ['<!--', '-->']\n  },\n  brackets: [['<!--', '-->'], ['<', '>'], ['{', '}'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\n    action: {\n      indentAction: _monaco.languages.IndentAction.IndentOutdent\n    }\n  }, {\n    beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    action: {\n      indentAction: _monaco.languages.IndentAction.Indent\n    }\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#region\\\\b.*-->\"),\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#endregion\\\\b.*-->\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.html',\n  ignoreCase: true,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/<!DOCTYPE/, 'metatag', '@doctype'], [/<!--/, 'comment', '@comment'], [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter', 'tag', '', 'delimiter']], [/(<)(script)/, ['delimiter', {\n      token: 'tag',\n      next: '@script'\n    }]], [/(<)(style)/, ['delimiter', {\n      token: 'tag',\n      next: '@style'\n    }]], [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', {\n      token: 'tag',\n      next: '@otherTag'\n    }]], [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', {\n      token: 'tag',\n      next: '@otherTag'\n    }]], [/</, 'delimiter'], [/[^<]+/]],\n    doctype: [[/[^>]+/, 'metatag.content'], [/>/, 'metatag', '@pop']],\n    comment: [[/-->/, 'comment', '@pop'], [/[^-]+/, 'comment.content'], [/./, 'comment.content']],\n    otherTag: [[/\\/?>/, 'delimiter', '@pop'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/]],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [[/type/, 'attribute.name', '@scriptAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, ['delimiter', 'tag', {\n      token: 'delimiter',\n      next: '@pop'\n    }]]],\n    // After <script ... type\n    scriptAfterType: [[/=/, 'delimiter', '@scriptAfterTypeEquals'], [/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type =\n    scriptAfterTypeEquals: [[/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type = $S2\n    scriptWithCustomType: [[/>/, {\n      token: 'delimiter',\n      next: '@scriptEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    scriptEmbedded: [[/<\\/script/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^<]+/, '']],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [[/type/, 'attribute.name', '@styleAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, ['delimiter', 'tag', {\n      token: 'delimiter',\n      next: '@pop'\n    }]]],\n    // After <style ... type\n    styleAfterType: [[/=/, 'delimiter', '@styleAfterTypeEquals'], [/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type =\n    styleAfterTypeEquals: [[/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type = $S2\n    styleWithCustomType: [[/>/, {\n      token: 'delimiter',\n      next: '@styleEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    styleEmbedded: [[/<\\/style/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^<]+/, '']]\n  }\n};"],"sourceRoot":""}