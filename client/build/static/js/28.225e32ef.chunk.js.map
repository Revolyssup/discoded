{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/lua/lua.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","keywords","token","operators","symbols","escapes","tokenizer","root","cases","@keywords","@default","include","@operators","whitespace","comment","$1==$S2","next","string","$#==$S2"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,eAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGOP,EAAA,CACPS,aAAA,GACAC,aAAA,OACAC,SAAA,8JACAP,SAAA,EACAQ,MAAA,oBACAN,KAAA,IACAC,MAAA,KACG,CACHK,MAAA,kBACAN,KAAA,IACAC,MAAA,KACG,CACHK,MAAA,wBACAN,KAAA,IACAC,MAAA,MAEAM,UAAA,iEAA0F,wBAE1FC,QAAA,wBACAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,CACA,iBACAC,MAAA,CACAC,YAAA,CACAP,MAAA,cAEAQ,WAAA,gBAGA,CACAC,QAAA,eAEA,qHAA4F,uCAC5F,cAAS,0BACTH,MAAA,CACAI,aAAA,YACAF,WAAA,MAGA,6GACA,SAAQ,aACR,iIACAG,WAAA,iFACAC,QAAA,qCACAN,MAAA,CACAO,UAAA,CACAb,MAAA,UACAc,KAAA,QAEAN,WAAA,aAEK,iBACLO,OAAA,6FACAT,MAAA,CACAU,UAAA,CACAhB,MAAA,SACAc,KAAA,QAEAN,WAAA","file":"static/js/28.225e32ef.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['--[[', ']]']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.lua',\n  keywords: ['and', 'break', 'do', 'else', 'elseif', 'end', 'false', 'for', 'function', 'goto', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat', 'return', 'then', 'true', 'until', 'while'],\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.array',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }],\n  operators: ['+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=', ';', ':', ',', '.', '..', '...'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // keys\n    [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']], [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings: recover on non-terminated strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string.\"'], [/'/, 'string', '@string.\\'']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/--\\[([=]*)\\[/, 'comment', '@comment.$1'], [/--.*$/, 'comment']],\n    comment: [[/[^\\]]+/, 'comment'], [/\\]([=]*)\\]/, {\n      cases: {\n        '$1==$S2': {\n          token: 'comment',\n          next: '@pop'\n        },\n        '@default': 'comment'\n      }\n    }], [/./, 'comment']],\n    string: [[/[^\\\\\"']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }]]\n  }\n};"],"sourceRoot":""}