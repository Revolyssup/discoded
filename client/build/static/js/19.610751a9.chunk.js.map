{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/fsharp/fsharp.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","@keywords","token","@default","include","next","whitespace","comment","string","$#==$S2","litstring"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,0DACAC,IAAA,IAAAD,OAAA,mEAIOZ,EAAA,CACPc,aAAA,GACAC,aAAA,MACAC,SAAA,uyBAEAC,QAAA,4BACAC,QAAA,wEACAC,cAAA,iBACAC,YAAA,UAEAC,UAAA,CACAC,KAAA,CACA,iBACAC,MAAA,CACAC,YAAA,CACAC,MAAA,cAEAC,WAAA,gBAGA,CACAC,QAAA,eAEA,0BACA,gCACA,cAAS,uEACT,iRACA,SAAQ,aACR,+FACA,QACAF,MAAA,eACAG,KAAA,eAEA,yGACAC,WAAA,8EACAC,QAAA,wGACAC,OAAA,iGACAR,MAAA,CACAS,UAAA,CACAP,MAAA,SACAG,KAAA,QAEAF,WAAA,aAGAO,UAAA,iDACAR,MAAA,eACAG,KAAA","file":"static/js/19.610751a9.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.fs',\n  keywords: ['abstract', 'and', 'atomic', 'as', 'assert', 'asr', 'base', 'begin', 'break', 'checked', 'component', 'const', 'constraint', 'constructor', 'continue', 'class', 'default', 'delegate', 'do', 'done', 'downcast', 'downto', 'elif', 'else', 'end', 'exception', 'eager', 'event', 'external', 'extern', 'false', 'finally', 'for', 'fun', 'function', 'fixed', 'functor', 'global', 'if', 'in', 'include', 'inherit', 'inline', 'interface', 'internal', 'land', 'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let', 'match', 'member', 'mod', 'module', 'mutable', 'namespace', 'method', 'mixin', 'new', 'not', 'null', 'of', 'open', 'or', 'object', 'override', 'private', 'parallel', 'process', 'protected', 'pure', 'public', 'rec', 'return', 'static', 'sealed', 'struct', 'sig', 'then', 'to', 'true', 'tailcall', 'trait', 'try', 'type', 'upcast', 'use', 'val', 'void', 'virtual', 'volatile', 'when', 'while', 'with', 'yield'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /[uU]?[yslnLI]?/,\n  floatsuffix: /[fFmM]?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // [< attributes >].\n    [/\\[<.*>\\]/, 'annotation'], // Preprocessor directive\n    [/^#(if|else|endif)/, 'keyword'], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, 'delimiter'], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/0x[0-9a-fA-F]+LF/, 'number.float'], [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'], [/0b[0-1]+(@integersuffix)/, 'number.bin'], [/\\d+(@integersuffix)/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"\"\"/, 'string', '@string.\"\"\"'], [/\"/, 'string', '@string.\"'], // literal string\n    [/\\@\"/, {\n      token: 'string.quote',\n      next: '@litstring'\n    }], // characters\n    [/'[^\\\\']'B?/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\(\\*(?!\\))/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^*(]+/, 'comment'], [/\\*\\)/, 'comment', '@pop'], [/\\*/, 'comment'], [/\\(\\*\\)/, 'comment'], [/\\(/, 'comment']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/(\"\"\"|\"B?)/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }]],\n    litstring: [[/[^\"]+/, 'string'], [/\"\"/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }]]\n  }\n};"],"sourceRoot":""}