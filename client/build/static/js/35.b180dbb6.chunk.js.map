{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","@keywords","@default","include","@operators","comment","string","bracket","next","whitespace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,+BACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGOP,EAAA,CACPS,aAAA,GACAC,aAAA,aACAC,YAAA,EACAP,SAAA,EACAE,KAAA,IACAC,MAAA,IACAK,MAAA,mBACG,CACHN,KAAA,IACAC,MAAA,IACAK,MAAA,oBACG,CACHN,KAAA,IACAC,MAAA,IACAK,MAAA,yBACG,CACHN,KAAA,IACAC,MAAA,IACAK,MAAA,oBAEAC,SAAA,4LACAC,aAAA,uFACAC,UAAA,uFAEAC,QAAA,wBAEAC,UAAA,CACAC,KAAA,CACA,mBACAC,MAAA,CACAC,YAAA,CACAR,MAAA,cAEAS,WAAA,gBAGA,CACAC,QAAA,eAEA,cAAS,2DACTH,MAAA,CACAI,aAAA,YACAF,WAAA,MAGA,mEAAuE,+BACvE,SAAQ,aACR,8DACA,iEAGAG,QAAA,wBACA,8CACAC,OAAA,4DACAb,MAAA,eACAc,QAAA,SACAC,KAAA,UAEAC,WAAA","file":"static/js/35.b180dbb6.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.pascaligo',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['begin', 'block', 'case', 'const', 'else', 'end', 'fail', 'for', 'from', 'function', 'if', 'is', 'nil', 'of', 'remove', 'return', 'skip', 'then', 'type', 'var', 'while', 'with', 'option', 'None', 'transaction'],\n  typeKeywords: ['bool', 'int', 'list', 'map', 'nat', 'record', 'string', 'unit', 'address', 'map', 'mtz', 'xtz'],\n  operators: ['=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or', '+', '-', '*', '/', '@', '&', '^', '%'],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/'/, 'string.invalid'], [/\\#\\d+/, 'string']],\n\n    /* */\n    comment: [[/[^\\(\\*]+/, 'comment'], //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n    [/\\*\\)/, 'comment', '@pop'], [/\\(\\*/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\(\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}