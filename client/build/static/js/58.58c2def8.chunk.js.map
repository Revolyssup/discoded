{"version":3,"sources":["../../server/client/node_modules/monaco-editor/esm/vs/basic-languages/st/st.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","ignoreCase","token","keywords","constant","defineKeywords","typeKeywords","operators","builtinVariables","builtinFunctions","symbols","escapes","tokenizer","root","next","cases","@operators","@keywords","@typeKeywords","@defineKeywords","@constant","@builtinVariables","@builtinFunctions","@default","include","bracket","params","comment","comment2","whitespace","string_dq","string_sq"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,2rBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,KACAC,MAAA,MACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,eACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,eACG,CACHF,KAAA,YACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,WACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,eACAC,MAAA,WACG,CACHD,KAAA,OACAC,MAAA,YACG,CACHD,KAAA,SACAC,MAAA,cACG,CACHD,KAAA,UACAC,MAAA,eACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,iBACAC,MAAA,sBACG,CACHD,KAAA,SACAC,MAAA,cACG,CACHD,KAAA,OACAC,MAAA,YACG,CACHD,KAAA,eACAC,MAAA,YACG,CACHD,KAAA,cACAC,MAAA,mBACG,CACHD,KAAA,gBACAC,MAAA,qBACG,CACHD,KAAA,MACAC,MAAA,WACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,UACAC,MAAA,eACG,CACHD,KAAA,UACAC,MAAA,eACG,CACHD,KAAA,SACAC,MAAA,cACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,UACAC,MAAA,gBAEAE,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,MACAC,MAAA,WACG,CACHD,KAAA,YACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,WACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,aACAC,MAAA,WACG,CACHD,KAAA,eACAC,MAAA,WACG,CACHD,KAAA,OACAC,MAAA,YACG,CACHD,KAAA,SACAC,MAAA,cACG,CACHD,KAAA,UACAC,MAAA,eACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,iBACAC,MAAA,sBACG,CACHD,KAAA,SACAC,MAAA,cACG,CACHD,KAAA,OACAC,MAAA,YACG,CACHD,KAAA,eACAC,MAAA,YACG,CACHD,KAAA,cACAC,MAAA,mBACG,CACHD,KAAA,gBACAC,MAAA,qBACG,CACHD,KAAA,MACAC,MAAA,WACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,UACAC,MAAA,eACG,CACHD,KAAA,UACAC,MAAA,eACG,CACHD,KAAA,SACAC,MAAA,cACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,WACAC,MAAA,gBACG,CACHD,KAAA,UACAC,MAAA,gBAEAG,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,6BACAC,IAAA,IAAAD,OAAA,mCAIOb,EAAA,CACPe,aAAA,GACAC,aAAA,MACAC,YAAA,EACAb,SAAA,EACAc,MAAA,kBACAZ,KAAA,IACAC,MAAA,KACG,CACHW,MAAA,wBACAZ,KAAA,IACAC,MAAA,KACG,CACHW,MAAA,mBACAZ,KAAA,IACAC,MAAA,MAEAY,SAAA,6ZACAC,SAAA,wBACAC,eAAA,2oBACAC,aAAA,uLACAC,UAAA,sSACAC,iBAAA,GACAC,iBAAA,8LAEAC,QAAA,wBAEAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,8bAAmd,0HAAwI,qBAC3lBX,MAAA,YACAY,KAAA,YAEA,iBACAC,MAAA,CACAC,aAAA,YACAC,YAAA,UACAC,gBAAA,OACAC,kBAAA,WACAC,YAAA,WACAC,oBAAA,aACAC,oBAAA,aACAC,WAAA,gBAEK,CACLC,QAAA,eACK,cAAO,wDACZtB,MAAA,eACAuB,QAAA,QACAX,KAAA,eACK,MACLZ,MAAA,eACAuB,QAAA,QACAX,KAAA,eACK,uGACLY,OAAA,6BACAxB,MAAA,aACAY,KAAA,SACK,8CACLa,QAAA,iGACAC,SAAA,mGACAC,WAAA,4GACAC,UAAA,yFACA5B,MAAA,eACAuB,QAAA,SACAX,KAAA,UAEAiB,UAAA,yFACA7B,MAAA,eACAuB,QAAA,SACAX,KAAA","file":"static/js/58.58c2def8.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['var', 'end_var'], ['var_input', 'end_var'], ['var_output', 'end_var'], ['var_in_out', 'end_var'], ['var_temp', 'end_var'], ['var_global', 'end_var'], ['var_access', 'end_var'], ['var_external', 'end_var'], ['type', 'end_type'], ['struct', 'end_struct'], ['program', 'end_program'], ['function', 'end_function'], ['function_block', 'end_function_block'], ['action', 'end_action'], ['step', 'end_step'], ['initial_step', 'end_step'], ['transaction', 'end_transaction'], ['configuration', 'end_configuration'], ['tcp', 'end_tcp'], ['recource', 'end_recource'], ['channel', 'end_channel'], ['library', 'end_library'], ['folder', 'end_folder'], ['binaries', 'end_binaries'], ['includes', 'end_includes'], ['sources', 'end_sources']],\n  autoClosingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '{',\n    close: '}'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '/*',\n    close: '*/'\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string_sq']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string_dq']\n  }, {\n    open: 'var_input',\n    close: 'end_var'\n  }, {\n    open: 'var_output',\n    close: 'end_var'\n  }, {\n    open: 'var_in_out',\n    close: 'end_var'\n  }, {\n    open: 'var_temp',\n    close: 'end_var'\n  }, {\n    open: 'var_global',\n    close: 'end_var'\n  }, {\n    open: 'var_access',\n    close: 'end_var'\n  }, {\n    open: 'var_external',\n    close: 'end_var'\n  }, {\n    open: 'type',\n    close: 'end_type'\n  }, {\n    open: 'struct',\n    close: 'end_struct'\n  }, {\n    open: 'program',\n    close: 'end_program'\n  }, {\n    open: 'function',\n    close: 'end_function'\n  }, {\n    open: 'function_block',\n    close: 'end_function_block'\n  }, {\n    open: 'action',\n    close: 'end_action'\n  }, {\n    open: 'step',\n    close: 'end_step'\n  }, {\n    open: 'initial_step',\n    close: 'end_step'\n  }, {\n    open: 'transaction',\n    close: 'end_transaction'\n  }, {\n    open: 'configuration',\n    close: 'end_configuration'\n  }, {\n    open: 'tcp',\n    close: 'end_tcp'\n  }, {\n    open: 'recource',\n    close: 'end_recource'\n  }, {\n    open: 'channel',\n    close: 'end_channel'\n  }, {\n    open: 'library',\n    close: 'end_library'\n  }, {\n    open: 'folder',\n    close: 'end_folder'\n  }, {\n    open: 'binaries',\n    close: 'end_binaries'\n  }, {\n    open: 'includes',\n    close: 'end_includes'\n  }, {\n    open: 'sources',\n    close: 'end_sources'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: 'var',\n    close: 'end_var'\n  }, {\n    open: 'var_input',\n    close: 'end_var'\n  }, {\n    open: 'var_output',\n    close: 'end_var'\n  }, {\n    open: 'var_in_out',\n    close: 'end_var'\n  }, {\n    open: 'var_temp',\n    close: 'end_var'\n  }, {\n    open: 'var_global',\n    close: 'end_var'\n  }, {\n    open: 'var_access',\n    close: 'end_var'\n  }, {\n    open: 'var_external',\n    close: 'end_var'\n  }, {\n    open: 'type',\n    close: 'end_type'\n  }, {\n    open: 'struct',\n    close: 'end_struct'\n  }, {\n    open: 'program',\n    close: 'end_program'\n  }, {\n    open: 'function',\n    close: 'end_function'\n  }, {\n    open: 'function_block',\n    close: 'end_function_block'\n  }, {\n    open: 'action',\n    close: 'end_action'\n  }, {\n    open: 'step',\n    close: 'end_step'\n  }, {\n    open: 'initial_step',\n    close: 'end_step'\n  }, {\n    open: 'transaction',\n    close: 'end_transaction'\n  }, {\n    open: 'configuration',\n    close: 'end_configuration'\n  }, {\n    open: 'tcp',\n    close: 'end_tcp'\n  }, {\n    open: 'recource',\n    close: 'end_recource'\n  }, {\n    open: 'channel',\n    close: 'end_channel'\n  }, {\n    open: 'library',\n    close: 'end_library'\n  }, {\n    open: 'folder',\n    close: 'end_folder'\n  }, {\n    open: 'binaries',\n    close: 'end_binaries'\n  }, {\n    open: 'includes',\n    close: 'end_includes'\n  }, {\n    open: 'sources',\n    close: 'end_sources'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.st',\n  ignoreCase: true,\n  brackets: [{\n    token: 'delimiter.curly',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: ['if', 'end_if', 'elsif', 'else', 'case', 'of', 'to', '__try', '__catch', '__finally', 'do', 'with', 'by', 'while', 'repeat', 'end_while', 'end_repeat', 'end_case', 'for', 'end_for', 'task', 'retain', 'non_retain', 'constant', 'with', 'at', 'exit', 'return', 'interval', 'priority', 'address', 'port', 'on_channel', 'then', 'iec', 'file', 'uses', 'version', 'packagetype', 'displayname', 'copyright', 'summary', 'vendor', 'common_source', 'from', 'extends'],\n  constant: ['false', 'true', 'null'],\n  defineKeywords: ['var', 'var_input', 'var_output', 'var_in_out', 'var_temp', 'var_global', 'var_access', 'var_external', 'end_var', 'type', 'end_type', 'struct', 'end_struct', 'program', 'end_program', 'function', 'end_function', 'function_block', 'end_function_block', 'interface', 'end_interface', 'method', 'end_method', 'property', 'end_property', 'namespace', 'end_namespace', 'configuration', 'end_configuration', 'tcp', 'end_tcp', 'resource', 'end_resource', 'channel', 'end_channel', 'library', 'end_library', 'folder', 'end_folder', 'binaries', 'end_binaries', 'includes', 'end_includes', 'sources', 'end_sources', 'action', 'end_action', 'step', 'initial_step', 'end_step', 'transaction', 'end_transaction'],\n  typeKeywords: ['int', 'sint', 'dint', 'lint', 'usint', 'uint', 'udint', 'ulint', 'real', 'lreal', 'time', 'date', 'time_of_day', 'date_and_time', 'string', 'bool', 'byte', 'word', 'dword', 'array', 'pointer', 'lword'],\n  operators: ['=', '>', '<', ':', ':=', '<=', '>=', '<>', '&', '+', '-', '*', '**', 'MOD', '^', 'or', 'and', 'not', 'xor', 'abs', 'acos', 'asin', 'atan', 'cos', 'exp', 'expt', 'ln', 'log', 'sin', 'sqrt', 'tan', 'sel', 'max', 'min', 'limit', 'mux', 'shl', 'shr', 'rol', 'ror', 'indexof', 'sizeof', 'adr', 'adrinst', 'bitadr', 'is_valid', 'ref', 'ref_to'],\n  builtinVariables: [],\n  builtinFunctions: ['sr', 'rs', 'tp', 'ton', 'tof', 'eq', 'ge', 'le', 'lt', 'ne', 'round', 'trunc', 'ctd', 'сtu', 'ctud', 'r_trig', 'f_trig', 'move', 'concat', 'delete', 'find', 'insert', 'left', 'len', 'replace', 'right', 'rtc'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // C# style strings\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/(\\.\\.)/, 'delimiter'], [/\\b(16#[0-9A-Fa-f\\_]*)+\\b/, 'number.hex'], [/\\b(2#[01\\_]+)+\\b/, 'number.binary'], [/\\b(8#[0-9\\_]*)+\\b/, 'number.octal'], [/\\b\\d*\\.\\d+([eE][\\-+]?\\d+)?\\b/, 'number.float'], [/\\b(L?REAL)#[0-9\\_\\.e]+\\b/, 'number.float'], [/\\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#[0-9\\_]+\\b/, 'number'], [/\\d+/, 'number'], [/\\b(T|DT|TOD)#[0-9:-_shmyd]+\\b/, 'tag'], [/\\%(I|Q|M)(X|B|W|D|L)[0-9\\.]+/, 'tag'], [/\\%(I|Q|M)[0-9\\.]*/, 'tag'], [/\\b[A-Za-z]{1,6}#[0-9]+\\b/, 'tag'], [/\\b(TO_|CTU_|CTD_|CTUD_|MUX_|SEL_)[A_Za-z]+\\b/, 'predefined'], [/\\b[A_Za-z]+(_TO_)[A_Za-z]+\\b/, 'predefined'], [/[;]/, 'delimiter'], [/[.]/, {\n      token: 'delimiter',\n      next: '@params'\n    }], // identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@operators': 'operators',\n        '@keywords': 'keyword',\n        '@typeKeywords': 'type',\n        '@defineKeywords': 'variable',\n        '@constant': 'constant',\n        '@builtinVariables': 'predefined',\n        '@builtinFunctions': 'predefined',\n        '@default': 'identifier'\n      }\n    }], {\n      include: '@whitespace'\n    }, [/[{}()\\[\\]]/, '@brackets'], [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string_dq'\n    }], [/'/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string_sq'\n    }], [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    params: [[/\\b[A-Za-z0-9_]+\\b(?=\\()/, {\n      token: 'identifier',\n      next: '@pop'\n    }], [/\\b[A-Za-z0-9_]+\\b/, 'variable.name', '@pop']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\/\\*/, 'comment', '@push'], [\"\\\\*/\", 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    comment2: [[/[^\\(*]+/, 'comment'], [/\\(\\*/, 'comment', '@push'], [\"\\\\*\\\\)\", 'comment', '@pop'], [/[\\(*]/, 'comment']],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\/\\/.*$/, 'comment'], [/\\/\\*/, 'comment', '@comment'], [/\\(\\*/, 'comment', '@comment2']],\n    string_dq: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    string_sq: [[/[^\\\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]]\n  }\n};"],"sourceRoot":""}