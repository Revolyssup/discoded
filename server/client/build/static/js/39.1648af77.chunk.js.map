{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/rust/rust.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","tokenPostfix","defaultToken","keywords","typeKeywords","constants","supportConstants","supportMacros","operators","escapes","delimiters","symbols","intSuffixes","floatSuffixes","tokenizer","root","cases","@typeKeywords","@keywords","@supportConstants","@supportMacros","@constants","@default","token","bracket","next","include","@operators","whitespace","comment","string","numbers"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,aAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAG,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,6BACAC,IAAA,IAAAD,OAAA,mCAIOb,EAAA,CACPe,aAAA,QACAC,aAAA,UACAC,SAAA,6aACAC,aAAA,ocACAC,UAAA,yDACAC,iBAAA,0bACAC,cAAA,2FACAC,UAAA,iGAAgI,8FAChIC,QAAA,uCACAC,WAAA,MACAC,QAAA,2CACAC,YAAA,4BACAC,cAAA,WACAC,UAAA,CACAC,KAAA,4CACAC,MAAA,CACAC,gBAAA,eACAC,YAAA,UACAC,oBAAA,UACAC,iBAAA,UACAC,aAAA,UACAC,WAAA,gBAGA,oBACA,kDACA,8BACA,MACAC,MAAA,eACAC,QAAA,QACAC,KAAA,YACK,CACLC,QAAA,YAEA,CACAA,QAAA,eACK,gBACLV,MAAA,CACAE,YAAA,UACAI,WAAA,eAEK,gBAAQ,0BACbN,MAAA,CACAW,aAAA,WACAL,WAAA,OAGAM,WAAA,6EACAC,QAAA,iGACAC,OAAA,yFACAP,MAAA,eACAC,QAAA,SACAC,KAAA,UAEAM,QAAA,CACA,+BACAR,MAAA,WAEA,+BACAA,MAAA,WAEA,6DACAA,MAAA,WAEA,uCACAA,MAAA,WAEA,qCACAA,MAAA,WAEA,+BACAA,MAAA","file":"static/js/39.1648af77.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '{',\n    close: '}'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  tokenPostfix: '.rust',\n  defaultToken: 'invalid',\n  keywords: ['as', 'box', 'break', 'const', 'continue', 'crate', 'else', 'enum', 'extern', 'false', 'fn', 'for', 'if', 'impl', 'in', 'let', 'loop', 'match', 'mod', 'move', 'mut', 'pub', 'ref', 'return', 'self', 'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use', 'where', 'while', 'catch', 'default', 'union', 'static', 'abstract', 'alignof', 'become', 'do', 'final', 'macro', 'offsetof', 'override', 'priv', 'proc', 'pure', 'sizeof', 'typeof', 'unsized', 'virtual', 'yield'],\n  typeKeywords: ['Self', 'm32', 'm64', 'm128', 'f80', 'f16', 'f128', 'int', 'uint', 'float', 'char', 'bool', 'u8', 'u16', 'u32', 'u64', 'f32', 'f64', 'i8', 'i16', 'i32', 'i64', 'str', 'Option', 'Either', 'c_float', 'c_double', 'c_void', 'FILE', 'fpos_t', 'DIR', 'dirent', 'c_char', 'c_schar', 'c_uchar', 'c_short', 'c_ushort', 'c_int', 'c_uint', 'c_long', 'c_ulong', 'size_t', 'ptrdiff_t', 'clock_t', 'time_t', 'c_longlong', 'c_ulonglong', 'intptr_t', 'uintptr_t', 'off_t', 'dev_t', 'ino_t', 'pid_t', 'mode_t', 'ssize_t'],\n  constants: ['true', 'false', 'Some', 'None', 'Left', 'Right', 'Ok', 'Err'],\n  supportConstants: ['EXIT_FAILURE', 'EXIT_SUCCESS', 'RAND_MAX', 'EOF', 'SEEK_SET', 'SEEK_CUR', 'SEEK_END', '_IOFBF', '_IONBF', '_IOLBF', 'BUFSIZ', 'FOPEN_MAX', 'FILENAME_MAX', 'L_tmpnam', 'TMP_MAX', 'O_RDONLY', 'O_WRONLY', 'O_RDWR', 'O_APPEND', 'O_CREAT', 'O_EXCL', 'O_TRUNC', 'S_IFIFO', 'S_IFCHR', 'S_IFBLK', 'S_IFDIR', 'S_IFREG', 'S_IFMT', 'S_IEXEC', 'S_IWRITE', 'S_IREAD', 'S_IRWXU', 'S_IXUSR', 'S_IWUSR', 'S_IRUSR', 'F_OK', 'R_OK', 'W_OK', 'X_OK', 'STDIN_FILENO', 'STDOUT_FILENO', 'STDERR_FILENO'],\n  supportMacros: ['format!', 'print!', 'println!', 'panic!', 'format_args!', 'unreachable!', 'write!', 'writeln!'],\n  operators: ['!', '!=', '%', '%=', '&', '&=', '&&', '*', '*=', '+', '+=', '-', '-=', '->', '.', '..', '...', '/', '/=', ':', ';', '<<', '<<=', '<', '<=', '=', '==', '=>', '>', '>=', '>>', '>>=', '@', '^', '^=', '|', '|=', '||', '_', '?', '#'],\n  escapes: /\\\\([nrt0\\\"''\\\\]|x\\h{2}|u\\{\\h{1,6}\\})/,\n  delimiters: /[,]/,\n  symbols: /[\\#\\!\\%\\&\\*\\+\\-\\.\\/\\:\\;\\<\\=\\>\\@\\^\\|_\\?]+/,\n  intSuffixes: /[iu](8|16|32|64|128|size)/,\n  floatSuffixes: /f(32|64)/,\n  tokenizer: {\n    root: [[/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/, {\n      cases: {\n        '@typeKeywords': 'keyword.type',\n        '@keywords': 'keyword',\n        '@supportConstants': 'keyword',\n        '@supportMacros': 'keyword',\n        '@constants': 'keyword',\n        '@default': 'identifier'\n      }\n    }], // Designator\n    [/\\$/, 'identifier'], // Lifetime annotations\n    [/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\\'])/, 'identifier'], // Byte literal\n    [/'\\S'/, 'string.byteliteral'], // Strings\n    [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string'\n    }], {\n      include: '@numbers'\n    }, // Whitespace + comments\n    {\n      include: '@whitespace'\n    }, [/@delimiters/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'delimiter'\n      }\n    }], [/[{}()\\[\\]<>]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': ''\n      }\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\/\\*/, 'comment', '@push'], [\"\\\\*/\", 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    numbers: [//Octal\n    [/(0o[0-7_]+)(@intSuffixes)?/, {\n      token: 'number'\n    }], //Binary\n    [/(0b[0-1_]+)(@intSuffixes)?/, {\n      token: 'number'\n    }], //Exponent\n    [/[\\d][\\d_]*(\\.[\\d][\\d_]*)?[eE][+-][\\d_]+(@floatSuffixes)?/, {\n      token: 'number'\n    }], //Float\n    [/\\b(\\d\\.?[\\d_]*)(@floatSuffixes)?\\b/, {\n      token: 'number'\n    }], //Hexadecimal\n    [/(0x[\\da-fA-F]+)_?(@intSuffixes)?/, {\n      token: 'number'\n    }], //Integer\n    [/[\\d][\\d_]*(@intSuffixes?)?/, {\n      token: 'number'\n    }]]\n  }\n};"],"sourceRoot":""}