{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","@keywords","@operators","@default","$2","whitespace","string"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KAEAC,SAAA,4FACAC,iBAAA,EACAC,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,wBAGOP,EAAA,CACPQ,aAAA,GACAC,aAAA,MACAC,YAAA,EACAP,SAAA,EACAQ,MAAA,kBACAN,KAAA,IACAC,MAAA,KACG,CACHK,MAAA,wBACAN,KAAA,IACAC,MAAA,KAEA,CACAK,MAAA,iBACAN,KAAA,KACAC,MAAA,SACG,CACHK,MAAA,oBACAN,KAAA,QACAC,MAAA,YACG,CACHK,MAAA,kBACAN,KAAA,MACAC,MAAA,UACG,CACHK,MAAA,kBACAN,KAAA,MACAC,MAAA,WAEAM,SAAA,0GACAC,SAAA,2BACAC,UAAA,wDAEAC,WAAA,iBACAC,QAAA,oBACAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,CACA,CACAC,QAAA,eAEA,gCACA,gBACAC,MAAA,CACAC,YAAA,CACAX,MAAA,cAEAY,aAAA,WACAC,WAAA,mBAGA,uBACAH,MAAA,CACAI,GAAA,4BACAD,WAAA,MAGA,6CACA,sCACAH,MAAA,CACAE,aAAA,WACAC,WAAA,eAGA,+DACAE,WAAA,0CACAC,OAAA","file":"static/js/40.7d9f1503.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '\\''\n  },\n  brackets: [['(', ')'], ['[', ']'], ['If', 'EndIf'], ['While', 'EndWhile'], ['For', 'EndFor'], ['Sub', 'EndSub']],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string', 'comment']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string', 'comment']\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.sb',\n  ignoreCase: true,\n  brackets: [{\n    token: 'delimiter.array',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, // Special bracket statement pairs\n  {\n    token: 'keyword.tag-if',\n    open: 'If',\n    close: 'EndIf'\n  }, {\n    token: 'keyword.tag-while',\n    open: 'While',\n    close: 'EndWhile'\n  }, {\n    token: 'keyword.tag-for',\n    open: 'For',\n    close: 'EndFor'\n  }, {\n    token: 'keyword.tag-sub',\n    open: 'Sub',\n    close: 'EndSub'\n  }],\n  keywords: ['Else', 'ElseIf', 'EndFor', 'EndIf', 'EndSub', 'EndWhile', 'For', 'Goto', 'If', 'Step', 'Sub', 'Then', 'To', 'While'],\n  tagwords: ['If', 'Sub', 'While', 'For'],\n  operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n  // we include these common regular expressions\n  identifier: /[a-zA-Z_][\\w]*/,\n  symbols: /[=><:+\\-*\\/%\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// whitespace\n    {\n      include: '@whitespace'\n    }, // classes\n    [/(@identifier)(?=[.])/, 'type'], // identifiers, tagwords, and keywords\n    [/@identifier/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@operators': 'operator',\n        '@default': 'variable.name'\n      }\n    }], // methods, properties, and events\n    [/([.])(@identifier)/, {\n      cases: {\n        '$2': ['delimiter', 'type.member'],\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+/, 'number.float'], [/\\d+/, 'number'], // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': 'delimiter'\n      }\n    }], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/(\\').*$/, 'comment']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"C?/, 'string', '@pop']]\n  }\n};"],"sourceRoot":""}