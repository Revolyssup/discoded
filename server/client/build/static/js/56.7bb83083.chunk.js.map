{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/sophia/sophia.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","@keywords","@default","include","@operators","whitespace","comment","doccomment","string"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,+BACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,wBAGOR,EAAA,CACPS,aAAA,GACAC,aAAA,OACAN,SAAA,EACAO,MAAA,kBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,wBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,mBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,kBACAL,KAAA,IACAC,MAAA,MAEAK,SAAA,CACA,sXACAC,UAAA,sLAEAC,QAAA,wBACAC,QAAA,wEACAC,cAAA,mCACAC,YAAA,UAEAC,UAAA,CACAC,KAAA,CACA,iBACAC,MAAA,CACAC,YAAA,CACAV,MAAA,cAEAW,WAAA,gBAGA,CACAC,QAAA,eAEA,4BACA,uBACA,qBACA,cAAS,2DACTH,MAAA,CACAI,aAAA,YACAF,WAAA,MAGA,gWACA,SAAQ,aACR,8DACA,uGACAG,WAAA,qHACAC,QAAA,sEAEAC,WAAA,kFACAC,OAAA","file":"static/js/56.7bb83083.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '{',\n    close: '}',\n    notIn: ['string', 'comment']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string', 'comment']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string', 'comment']\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.aes',\n  brackets: [{\n    token: 'delimiter.curly',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.angle',\n    open: '<',\n    close: '>'\n  }],\n  keywords: [// Main keywords\n  'contract', 'library', 'entrypoint', 'function', 'stateful', 'state', 'hash', 'signature', 'tuple', 'list', 'address', 'string', 'bool', 'int', 'record', 'datatype', 'type', 'option', 'oracle', 'oracle_query', 'Call', 'Bits', 'Bytes', 'Oracle', 'String', 'Crypto', 'Address', 'Auth', 'Chain', 'None', 'Some', 'bits', 'bytes', 'event', 'let', 'map', 'private', 'public', 'true', 'false', 'var', 'if', 'else', 'throw'],\n  operators: ['=', '>', '<', '!', '~', '?', '::', ':', '==', '<=', '>=', '!=', '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=', '%=', '<<=', '>>=', '>>>='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // [[ attributes ]].\n    [/\\[\\[.*\\]\\]/, 'annotation'], // Preprocessor directive\n    [/^\\s*#\\w+/, 'keyword'], //DataTypes\n    [/int\\d*/, 'keyword'], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'], [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'], [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'], [/\\d[\\d']*\\d(@integersuffix)/, 'number'], [/\\d(@integersuffix)/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']]\n  }\n};"],"sourceRoot":""}