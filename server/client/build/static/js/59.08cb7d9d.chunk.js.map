{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/swift/swift.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","identifier","attributes","accessmodifiers","keywords","symbols","operatorstart","operatorend","operators","escapes","tokenizer","root","include","whitespace","endDblDocString","symbol","comment","commentdocbody","commentbody","attribute","cases","@attributes","@default","literal","token","next","stringlit","interpolatedexpression","keyword","@keywords","[A-Z][a-zA-Z0-9$]*","escapedkeyword","invokedmethod","$2"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAKO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGOP,EAAA,CACPS,aAAA,GACAC,aAAA,SAEAC,WAAA,kBAEAC,WAAA,0MACAC,gBAAA,gCACAC,SAAA,wsBACAC,QAAA,oCAEAC,cAAA,oPACAC,YAAA,qFACAC,UAAA,qDAEAC,QAAA,wEACAC,UAAA,CACAC,KAAA,EACAC,QAAA,eACK,CACLA,QAAA,YACK,CACLA,QAAA,cACK,CACLA,QAAA,YACK,CACLA,QAAA,YACK,CACLA,QAAA,kBACK,CACLA,QAAA,YAEAC,WAAA,4DACAC,gBAAA,sFACAC,OAAA,eAAkB,qHAClBC,QAAA,iIACAC,eAAA,4HACAC,YAAA,8EACAC,UAAA,mBACAC,MAAA,CACAC,cAAA,kBACAC,WAAA,OAGAC,QAAA,OACAC,MAAA,eACAC,KAAA,eACK,2MACLC,UAAA,UACAF,MAAA,WACAC,KAAA,4BACK,4DACLD,MAAA,eACAC,KAAA,SACK,gBACLE,uBAAA,QACAH,MAAA,WACAC,KAAA,4BACK,OACLD,MAAA,WACAC,KAAA,SACK,CACLb,QAAA,YACK,CACLA,QAAA,YACK,CACLA,QAAA,YAEAgB,QAAA,OACAJ,MAAA,WACAC,KAAA,oBACK,gBACLL,MAAA,CACAS,YAAA,UACAC,qBAAA,kBACAR,WAAA,iBAGAS,eAAA,OACAP,MAAA,WACAC,KAAA,SACK,oBAKLO,cAAA,wBACAZ,MAAA,CACAa,GAAA,gCACAX,WAAA","file":"static/js/59.08cb7d9d.chunk.js","sourcesContent":["/*!---------------------------------------------------------------------------------------------\r\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '`',\n    close: '`'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.swift',\n  // TODO(owensd): Support the full range of unicode valid identifiers.\n  identifier: /[a-zA-Z_][\\w$]*/,\n  // TODO(owensd): Support the @availability macro properly.\n  attributes: ['@autoclosure', '@noescape', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged', '@objc', '@UIApplicationMain', '@noreturn', '@availability', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'],\n  accessmodifiers: ['public', 'private', 'internal'],\n  keywords: ['__COLUMN__', '__FILE__', '__FUNCTION__', '__LINE__', 'as', 'as!', 'as?', 'associativity', 'break', 'case', 'catch', 'class', 'continue', 'convenience', 'default', 'deinit', 'didSet', 'do', 'dynamic', 'dynamicType', 'else', 'enum', 'extension', 'fallthrough', 'final', 'for', 'func', 'get', 'guard', 'if', 'import', 'in', 'infix', 'init', 'inout', 'internal', 'is', 'lazy', 'left', 'let', 'mutating', 'nil', 'none', 'nonmutating', 'operator', 'optional', 'override', 'postfix', 'precedence', 'prefix', 'private', 'protocol', 'Protocol', 'public', 'repeat', 'required', 'return', 'right', 'self', 'Self', 'set', 'static', 'struct', 'subscript', 'super', 'switch', 'throw', 'throws', 'try', 'try!', 'Type', 'typealias', 'unowned', 'var', 'weak', 'where', 'while', 'willSet', 'FALSE', 'TRUE'],\n  symbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\n  // Moved . to operatorstart so it can be a delimiter\n  operatorstart: /[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\n  operatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\n  operators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\n  // TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, {\n      include: '@attribute'\n    }, {\n      include: '@literal'\n    }, {\n      include: '@keyword'\n    }, {\n      include: '@invokedmethod'\n    }, {\n      include: '@symbol'\n    }],\n    whitespace: [[/\\s+/, 'white'], [/\"\"\"/, 'string.quote', '@endDblDocString']],\n    endDblDocString: [[/[^\"]+/, 'string'], [/\\\\\"/, 'string'], [/\"\"\"/, 'string.quote', '@popall'], [/\"/, 'string']],\n    symbol: [[/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/[.]/, 'delimiter'], [/@operators/, 'operator'], [/@symbols/, 'operator']],\n    comment: [[/\\/\\/\\/.*$/, 'comment.doc'], [/\\/\\*\\*/, 'comment.doc', '@commentdocbody'], [/\\/\\/.*$/, 'comment'], [/\\/\\*/, 'comment', '@commentbody']],\n    commentdocbody: [[/\\/\\*/, 'comment', '@commentbody'], [/\\*\\//, 'comment.doc', '@pop'], [/\\:[a-zA-Z]+\\:/, 'comment.doc.param'], [/./, 'comment.doc']],\n    commentbody: [[/\\/\\*/, 'comment', '@commentbody'], [/\\*\\//, 'comment', '@pop'], [/./, 'comment']],\n    attribute: [[/\\@@identifier/, {\n      cases: {\n        '@attributes': 'keyword.control',\n        '@default': ''\n      }\n    }]],\n    literal: [[/\"/, {\n      token: 'string.quote',\n      next: '@stringlit'\n    }], [/0[b]([01]_?)+/, 'number.binary'], [/0[o]([0-7]_?)+/, 'number.octal'], [/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex'], [/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'], [/(\\d_?)+/, 'number']],\n    stringlit: [[/\\\\\\(/, {\n      token: 'operator',\n      next: '@interpolatedexpression'\n    }], [/@escapes/, 'string'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }], [/./, 'string']],\n    interpolatedexpression: [[/\\(/, {\n      token: 'operator',\n      next: '@interpolatedexpression'\n    }], [/\\)/, {\n      token: 'operator',\n      next: '@pop'\n    }], {\n      include: '@literal'\n    }, {\n      include: '@keyword'\n    }, {\n      include: '@symbol'\n    }],\n    keyword: [[/`/, {\n      token: 'operator',\n      next: '@escapedkeyword'\n    }], [/@identifier/, {\n      cases: {\n        '@keywords': 'keyword',\n        '[A-Z][\\a-zA-Z0-9$]*': 'type.identifier',\n        '@default': 'identifier'\n      }\n    }]],\n    escapedkeyword: [[/`/, {\n      token: 'operator',\n      next: '@pop'\n    }], [/./, 'identifier']],\n    //\t\tsymbol: [\n    //\t\t\t[ /@symbols/, 'operator' ],\n    //\t\t\t[ /@operators/, 'operator' ]\n    //\t\t],\n    invokedmethod: [[/([.])(@identifier)/, {\n      cases: {\n        '$2': ['delimeter', 'type.identifier'],\n        '@default': ''\n      }\n    }]]\n  }\n};"],"sourceRoot":""}