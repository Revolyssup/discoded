{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/language/json/workerManager.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","../node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","../node_modules/monaco-editor/esm/vs/language/json/tokenization.js","../node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","WorkerManager","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","Date","now","_getClient","monaco","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","enableSchemaRequest","getProxy","getLanguageServiceWorker","resources","_i","arguments","length","then","client","_","withSyncedResources","create","line","character","is","value","candidate","Is","objectLiteral","number","one","two","three","four","start","end","Error","uri","range","defined","string","undefined","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","color","textEdit","additionalTextEdits","typedArray","startLine","endLine","startCharacter","endCharacter","kind","result","location","message","Warning","Information","Hint","severity","code","source","relatedInformation","title","command","args","replace","newText","insert","position","del","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","options","overwrite","ignoreIfExists","boolean","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","every","change","TextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolInformation","TextEditChangeImpl","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","Object","_workspaceEdit","forEach","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","textDocumentEdit","createFile","checkDocumentChanges","renameFile","deleteFile","version","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","String","Number","Boolean","Key","Null","name","containerName","CodeActionKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentSymbol","detail","selectionRange","children","deprecated","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","diagnostics","only","commandOrEdit","data","tabSize","insertSpaces","DocumentLink","target","TextDocument","TextDocumentSaveReason","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","i","ret","a","b","diff","lastModifiedOffset","e","startOffset","endOffset","substring","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","Uri","languageFeatures_Range","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","handle","modeId","getModeId","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","d","resource","worker","resetSchema","doValidation","markers","map","diag","toSeverity","startLineNumber","startColumn","endLineNumber","endColumn","toDiagnostics","getModel","err","console","error","lsSeverity","MarkerSeverity","Info","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","languages","toTextEdit","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","context","token","doComplete","info","wordInfo","getWordUntilPosition","wordRange","entry","item","insertText","sortText","filterText","insertTextFormat","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","suggestions","toMarkdownString","thing","toMarkedStringArray","HoverAdapter","provideHover","doHover","toSymbolKind","mKind","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","fromFormattingOptions","ParseOptions","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","provideColorPresentations","getColorPresentations","presentations","presentation","FoldingRangeAdapter","provideFoldingRanges","ranges","Comment","Imports","Region","toFoldingRangeKind","createScanner","ignoreTrivia","pos","len","tokenOffset","scanError","scanHexDigits","count","exact","digits","charCodeAt","scanNext","isWhiteSpace","fromCharCode","isLineBreak","ch_1","scanString","safeLength","commentClosed","isDigit","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","DEFAULT","allowTrailingComma","main_createScanner","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","comments","numberOfInsertedCharacters","adjustOffset","scanner","lastWasColon","tokens","endState","clone","type","substr","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_PROPERTY_NAME","TOKEN_VALUE_NUMBER","TOKEN_COMMENT_LINE","TOKEN_COMMENT_BLOCK","getStateData","startIndex","scopes","_tokenize","_state","equals","other","setStateData","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","__webpack_require__","__webpack_exports__","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"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","file":"static/js/54.338c38b1.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\n\nvar WorkerManager =\n/** @class */\nfunction () {\n  function WorkerManager(defaults) {\n    var _this = this;\n\n    this._defaults = defaults;\n    this._worker = null;\n    this._idleCheckInterval = setInterval(function () {\n      return _this._checkIfIdle();\n    }, 30 * 1000);\n    this._lastUsedTime = 0;\n    this._configChangeListener = this._defaults.onDidChange(function () {\n      return _this._stopWorker();\n    });\n  }\n\n  WorkerManager.prototype._stopWorker = function () {\n    if (this._worker) {\n      this._worker.dispose();\n\n      this._worker = null;\n    }\n\n    this._client = null;\n  };\n\n  WorkerManager.prototype.dispose = function () {\n    clearInterval(this._idleCheckInterval);\n\n    this._configChangeListener.dispose();\n\n    this._stopWorker();\n  };\n\n  WorkerManager.prototype._checkIfIdle = function () {\n    if (!this._worker) {\n      return;\n    }\n\n    var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n\n    if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n      this._stopWorker();\n    }\n  };\n\n  WorkerManager.prototype._getClient = function () {\n    this._lastUsedTime = Date.now();\n\n    if (!this._client) {\n      this._worker = monaco.editor.createWebWorker({\n        // module that exports the create() method and returns a `JSONWorker` instance\n        moduleId: 'vs/language/json/jsonWorker',\n        label: this._defaults.languageId,\n        // passed in to the create() method\n        createData: {\n          languageSettings: this._defaults.diagnosticsOptions,\n          languageId: this._defaults.languageId,\n          enableSchemaRequest: this._defaults.diagnosticsOptions.enableSchemaRequest\n        }\n      });\n      this._client = this._worker.getProxy();\n    }\n\n    return this._client;\n  };\n\n  WorkerManager.prototype.getLanguageServiceWorker = function () {\n    var _this = this;\n\n    var resources = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      resources[_i] = arguments[_i];\n    }\n\n    var _client;\n\n    return this._getClient().then(function (client) {\n      _client = client;\n    }).then(function (_) {\n      return _this._worker.withSyncedResources(resources);\n    }).then(function (_) {\n      return _client;\n    });\n  };\n\n  return WorkerManager;\n}();\n\nexport { WorkerManager };","/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\n\nexport var Position;\n\n(function (Position) {\n  /**\r\n   * Creates a new Position literal from the given line and character.\r\n   * @param line The position's line.\r\n   * @param character The position's character.\r\n   */\n  function create(line, character) {\n    return {\n      line: line,\n      character: character\n    };\n  }\n\n  Position.create = create;\n  /**\r\n   * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n  }\n\n  Position.is = is;\n})(Position || (Position = {}));\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\n\n\nexport var Range;\n\n(function (Range) {\n  function create(one, two, three, four) {\n    if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n      return {\n        start: Position.create(one, two),\n        end: Position.create(three, four)\n      };\n    } else if (Position.is(one) && Position.is(two)) {\n      return {\n        start: one,\n        end: two\n      };\n    } else {\n      throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n    }\n  }\n\n  Range.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n  }\n\n  Range.is = is;\n})(Range || (Range = {}));\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\n\n\nexport var Location;\n\n(function (Location) {\n  /**\r\n   * Creates a Location literal.\r\n   * @param uri The location's uri.\r\n   * @param range The location's range.\r\n   */\n  function create(uri, range) {\n    return {\n      uri: uri,\n      range: range\n    };\n  }\n\n  Location.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n  }\n\n  Location.is = is;\n})(Location || (Location = {}));\n/**\r\n * The LocationLink namespace provides helper functions to work with\r\n * [LocationLink](#LocationLink) literals.\r\n */\n\n\nexport var LocationLink;\n\n(function (LocationLink) {\n  /**\r\n   * Creates a LocationLink literal.\r\n   * @param targetUri The definition's uri.\r\n   * @param targetRange The full range of the definition.\r\n   * @param targetSelectionRange The span of the symbol definition at the target.\r\n   * @param originSelectionRange The span of the symbol being defined in the originating source file.\r\n   */\n  function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n    return {\n      targetUri: targetUri,\n      targetRange: targetRange,\n      targetSelectionRange: targetSelectionRange,\n      originSelectionRange: originSelectionRange\n    };\n  }\n\n  LocationLink.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && (Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange)) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n  }\n\n  LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\n\n\nexport var Color;\n\n(function (Color) {\n  /**\r\n   * Creates a new Color literal.\r\n   */\n  function create(red, green, blue, alpha) {\n    return {\n      red: red,\n      green: green,\n      blue: blue,\n      alpha: alpha\n    };\n  }\n\n  Color.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.number(candidate.red) && Is.number(candidate.green) && Is.number(candidate.blue) && Is.number(candidate.alpha);\n  }\n\n  Color.is = is;\n})(Color || (Color = {}));\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\n\n\nexport var ColorInformation;\n\n(function (ColorInformation) {\n  /**\r\n   * Creates a new ColorInformation literal.\r\n   */\n  function create(range, color) {\n    return {\n      range: range,\n      color: color\n    };\n  }\n\n  ColorInformation.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Range.is(candidate.range) && Color.is(candidate.color);\n  }\n\n  ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\n\n\nexport var ColorPresentation;\n\n(function (ColorPresentation) {\n  /**\r\n   * Creates a new ColorInformation literal.\r\n   */\n  function create(label, textEdit, additionalTextEdits) {\n    return {\n      label: label,\n      textEdit: textEdit,\n      additionalTextEdits: additionalTextEdits\n    };\n  }\n\n  ColorPresentation.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n  }\n\n  ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\r\n * Enum of known range kinds\r\n */\n\n\nexport var FoldingRangeKind;\n\n(function (FoldingRangeKind) {\n  /**\r\n   * Folding range for a comment\r\n   */\n  FoldingRangeKind[\"Comment\"] = \"comment\";\n  /**\r\n   * Folding range for a imports or includes\r\n   */\n\n  FoldingRangeKind[\"Imports\"] = \"imports\";\n  /**\r\n   * Folding range for a region (e.g. `#region`)\r\n   */\n\n  FoldingRangeKind[\"Region\"] = \"region\";\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\n\n\nexport var FoldingRange;\n\n(function (FoldingRange) {\n  /**\r\n   * Creates a new FoldingRange literal.\r\n   */\n  function create(startLine, endLine, startCharacter, endCharacter, kind) {\n    var result = {\n      startLine: startLine,\n      endLine: endLine\n    };\n\n    if (Is.defined(startCharacter)) {\n      result.startCharacter = startCharacter;\n    }\n\n    if (Is.defined(endCharacter)) {\n      result.endCharacter = endCharacter;\n    }\n\n    if (Is.defined(kind)) {\n      result.kind = kind;\n    }\n\n    return result;\n  }\n\n  FoldingRange.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.number(candidate.startLine) && Is.number(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n  }\n\n  FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\n\n\nexport var DiagnosticRelatedInformation;\n\n(function (DiagnosticRelatedInformation) {\n  /**\r\n   * Creates a new DiagnosticRelatedInformation literal.\r\n   */\n  function create(location, message) {\n    return {\n      location: location,\n      message: message\n    };\n  }\n\n  DiagnosticRelatedInformation.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n  }\n\n  DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\r\n * The diagnostic's severity.\r\n */\n\n\nexport var DiagnosticSeverity;\n\n(function (DiagnosticSeverity) {\n  /**\r\n   * Reports an error.\r\n   */\n  DiagnosticSeverity.Error = 1;\n  /**\r\n   * Reports a warning.\r\n   */\n\n  DiagnosticSeverity.Warning = 2;\n  /**\r\n   * Reports an information.\r\n   */\n\n  DiagnosticSeverity.Information = 3;\n  /**\r\n   * Reports a hint.\r\n   */\n\n  DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\n\n\nexport var Diagnostic;\n\n(function (Diagnostic) {\n  /**\r\n   * Creates a new Diagnostic literal.\r\n   */\n  function create(range, message, severity, code, source, relatedInformation) {\n    var result = {\n      range: range,\n      message: message\n    };\n\n    if (Is.defined(severity)) {\n      result.severity = severity;\n    }\n\n    if (Is.defined(code)) {\n      result.code = code;\n    }\n\n    if (Is.defined(source)) {\n      result.source = source;\n    }\n\n    if (Is.defined(relatedInformation)) {\n      result.relatedInformation = relatedInformation;\n    }\n\n    return result;\n  }\n\n  Diagnostic.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n  }\n\n  Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\n\n\nexport var Command;\n\n(function (Command) {\n  /**\r\n   * Creates a new Command literal.\r\n   */\n  function create(title, command) {\n    var args = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n\n    var result = {\n      title: title,\n      command: command\n    };\n\n    if (Is.defined(args) && args.length > 0) {\n      result.arguments = args;\n    }\n\n    return result;\n  }\n\n  Command.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n  }\n\n  Command.is = is;\n})(Command || (Command = {}));\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\n\n\nexport var TextEdit;\n\n(function (TextEdit) {\n  /**\r\n   * Creates a replace text edit.\r\n   * @param range The range of text to be replaced.\r\n   * @param newText The new text.\r\n   */\n  function replace(range, newText) {\n    return {\n      range: range,\n      newText: newText\n    };\n  }\n\n  TextEdit.replace = replace;\n  /**\r\n   * Creates a insert text edit.\r\n   * @param position The position to insert the text at.\r\n   * @param newText The text to be inserted.\r\n   */\n\n  function insert(position, newText) {\n    return {\n      range: {\n        start: position,\n        end: position\n      },\n      newText: newText\n    };\n  }\n\n  TextEdit.insert = insert;\n  /**\r\n   * Creates a delete text edit.\r\n   * @param range The range of text to be deleted.\r\n   */\n\n  function del(range) {\n    return {\n      range: range,\n      newText: ''\n    };\n  }\n\n  TextEdit.del = del;\n\n  function is(value) {\n    var candidate = value;\n    return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);\n  }\n\n  TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\n\n\nexport var TextDocumentEdit;\n\n(function (TextDocumentEdit) {\n  /**\r\n   * Creates a new `TextDocumentEdit`\r\n   */\n  function create(textDocument, edits) {\n    return {\n      textDocument: textDocument,\n      edits: edits\n    };\n  }\n\n  TextDocumentEdit.create = create;\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && VersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);\n  }\n\n  TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\n\nexport var CreateFile;\n\n(function (CreateFile) {\n  function create(uri, options) {\n    var result = {\n      kind: 'create',\n      uri: uri\n    };\n\n    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\n      result.options = options;\n    }\n\n    return result;\n  }\n\n  CreateFile.create = create;\n\n  function is(value) {\n    var candidate = value;\n    return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists)));\n  }\n\n  CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\n\nexport var RenameFile;\n\n(function (RenameFile) {\n  function create(oldUri, newUri, options) {\n    var result = {\n      kind: 'rename',\n      oldUri: oldUri,\n      newUri: newUri\n    };\n\n    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\n      result.options = options;\n    }\n\n    return result;\n  }\n\n  RenameFile.create = create;\n\n  function is(value) {\n    var candidate = value;\n    return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists)));\n  }\n\n  RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\n\nexport var DeleteFile;\n\n(function (DeleteFile) {\n  function create(uri, options) {\n    var result = {\n      kind: 'delete',\n      uri: uri\n    };\n\n    if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\n      result.options = options;\n    }\n\n    return result;\n  }\n\n  DeleteFile.create = create;\n\n  function is(value) {\n    var candidate = value;\n    return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists)));\n  }\n\n  DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\n\nexport var WorkspaceEdit;\n\n(function (WorkspaceEdit) {\n  function is(value) {\n    var candidate = value;\n    return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {\n      if (Is.string(change.kind)) {\n        return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n      } else {\n        return TextDocumentEdit.is(change);\n      }\n    }));\n  }\n\n  WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\n\nvar TextEditChangeImpl =\n/** @class */\nfunction () {\n  function TextEditChangeImpl(edits) {\n    this.edits = edits;\n  }\n\n  TextEditChangeImpl.prototype.insert = function (position, newText) {\n    this.edits.push(TextEdit.insert(position, newText));\n  };\n\n  TextEditChangeImpl.prototype.replace = function (range, newText) {\n    this.edits.push(TextEdit.replace(range, newText));\n  };\n\n  TextEditChangeImpl.prototype.delete = function (range) {\n    this.edits.push(TextEdit.del(range));\n  };\n\n  TextEditChangeImpl.prototype.add = function (edit) {\n    this.edits.push(edit);\n  };\n\n  TextEditChangeImpl.prototype.all = function () {\n    return this.edits;\n  };\n\n  TextEditChangeImpl.prototype.clear = function () {\n    this.edits.splice(0, this.edits.length);\n  };\n\n  return TextEditChangeImpl;\n}();\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\n\n\nvar WorkspaceChange =\n/** @class */\nfunction () {\n  function WorkspaceChange(workspaceEdit) {\n    var _this = this;\n\n    this._textEditChanges = Object.create(null);\n\n    if (workspaceEdit) {\n      this._workspaceEdit = workspaceEdit;\n\n      if (workspaceEdit.documentChanges) {\n        workspaceEdit.documentChanges.forEach(function (change) {\n          if (TextDocumentEdit.is(change)) {\n            var textEditChange = new TextEditChangeImpl(change.edits);\n            _this._textEditChanges[change.textDocument.uri] = textEditChange;\n          }\n        });\n      } else if (workspaceEdit.changes) {\n        Object.keys(workspaceEdit.changes).forEach(function (key) {\n          var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n          _this._textEditChanges[key] = textEditChange;\n        });\n      }\n    }\n  }\n\n  Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n    /**\r\n     * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n     * use to be returned from a workspace edit operation like rename.\r\n     */\n    get: function get() {\n      return this._workspaceEdit;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  WorkspaceChange.prototype.getTextEditChange = function (key) {\n    if (VersionedTextDocumentIdentifier.is(key)) {\n      if (!this._workspaceEdit) {\n        this._workspaceEdit = {\n          documentChanges: []\n        };\n      }\n\n      if (!this._workspaceEdit.documentChanges) {\n        throw new Error('Workspace edit is not configured for document changes.');\n      }\n\n      var textDocument = key;\n      var result = this._textEditChanges[textDocument.uri];\n\n      if (!result) {\n        var edits = [];\n        var textDocumentEdit = {\n          textDocument: textDocument,\n          edits: edits\n        };\n\n        this._workspaceEdit.documentChanges.push(textDocumentEdit);\n\n        result = new TextEditChangeImpl(edits);\n        this._textEditChanges[textDocument.uri] = result;\n      }\n\n      return result;\n    } else {\n      if (!this._workspaceEdit) {\n        this._workspaceEdit = {\n          changes: Object.create(null)\n        };\n      }\n\n      if (!this._workspaceEdit.changes) {\n        throw new Error('Workspace edit is not configured for normal text edit changes.');\n      }\n\n      var result = this._textEditChanges[key];\n\n      if (!result) {\n        var edits = [];\n        this._workspaceEdit.changes[key] = edits;\n        result = new TextEditChangeImpl(edits);\n        this._textEditChanges[key] = result;\n      }\n\n      return result;\n    }\n  };\n\n  WorkspaceChange.prototype.createFile = function (uri, options) {\n    this.checkDocumentChanges();\n\n    this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));\n  };\n\n  WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {\n    this.checkDocumentChanges();\n\n    this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));\n  };\n\n  WorkspaceChange.prototype.deleteFile = function (uri, options) {\n    this.checkDocumentChanges();\n\n    this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));\n  };\n\n  WorkspaceChange.prototype.checkDocumentChanges = function () {\n    if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {\n      throw new Error('Workspace edit is not configured for document changes.');\n    }\n  };\n\n  return WorkspaceChange;\n}();\n\nexport { WorkspaceChange };\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\n\nexport var TextDocumentIdentifier;\n\n(function (TextDocumentIdentifier) {\n  /**\r\n   * Creates a new TextDocumentIdentifier literal.\r\n   * @param uri The document's uri.\r\n   */\n  function create(uri) {\n    return {\n      uri: uri\n    };\n  }\n\n  TextDocumentIdentifier.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri);\n  }\n\n  TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\n\n\nexport var VersionedTextDocumentIdentifier;\n\n(function (VersionedTextDocumentIdentifier) {\n  /**\r\n   * Creates a new VersionedTextDocumentIdentifier literal.\r\n   * @param uri The document's uri.\r\n   * @param uri The document's text.\r\n   */\n  function create(uri, version) {\n    return {\n      uri: uri,\n      version: version\n    };\n  }\n\n  VersionedTextDocumentIdentifier.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));\n  }\n\n  VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\n\n\nexport var TextDocumentItem;\n\n(function (TextDocumentItem) {\n  /**\r\n   * Creates a new TextDocumentItem literal.\r\n   * @param uri The document's uri.\r\n   * @param languageId The document's language identifier.\r\n   * @param version The document's version number.\r\n   * @param text The document's text.\r\n   */\n  function create(uri, languageId, version, text) {\n    return {\n      uri: uri,\n      languageId: languageId,\n      version: version,\n      text: text\n    };\n  }\n\n  TextDocumentItem.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n  }\n\n  TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\n\n\nexport var MarkupKind;\n\n(function (MarkupKind) {\n  /**\r\n   * Plain text is supported as a content format\r\n   */\n  MarkupKind.PlainText = 'plaintext';\n  /**\r\n   * Markdown is supported as a content format\r\n   */\n\n  MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n\n(function (MarkupKind) {\n  /**\r\n   * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n   */\n  function is(value) {\n    var candidate = value;\n    return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n  }\n\n  MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\n\nexport var MarkupContent;\n\n(function (MarkupContent) {\n  /**\r\n   * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n   */\n  function is(value) {\n    var candidate = value;\n    return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n  }\n\n  MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\r\n * The kind of a completion entry.\r\n */\n\n\nexport var CompletionItemKind;\n\n(function (CompletionItemKind) {\n  CompletionItemKind.Text = 1;\n  CompletionItemKind.Method = 2;\n  CompletionItemKind.Function = 3;\n  CompletionItemKind.Constructor = 4;\n  CompletionItemKind.Field = 5;\n  CompletionItemKind.Variable = 6;\n  CompletionItemKind.Class = 7;\n  CompletionItemKind.Interface = 8;\n  CompletionItemKind.Module = 9;\n  CompletionItemKind.Property = 10;\n  CompletionItemKind.Unit = 11;\n  CompletionItemKind.Value = 12;\n  CompletionItemKind.Enum = 13;\n  CompletionItemKind.Keyword = 14;\n  CompletionItemKind.Snippet = 15;\n  CompletionItemKind.Color = 16;\n  CompletionItemKind.File = 17;\n  CompletionItemKind.Reference = 18;\n  CompletionItemKind.Folder = 19;\n  CompletionItemKind.EnumMember = 20;\n  CompletionItemKind.Constant = 21;\n  CompletionItemKind.Struct = 22;\n  CompletionItemKind.Event = 23;\n  CompletionItemKind.Operator = 24;\n  CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\n\n\nexport var InsertTextFormat;\n\n(function (InsertTextFormat) {\n  /**\r\n   * The primary text to be inserted is treated as a plain string.\r\n   */\n  InsertTextFormat.PlainText = 1;\n  /**\r\n   * The primary text to be inserted is treated as a snippet.\r\n   *\r\n   * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n   * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n   * the end of the snippet. Placeholders with equal identifiers are linked,\r\n   * that is typing in one will update others too.\r\n   *\r\n   * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n   */\n\n  InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\n\n\nexport var CompletionItem;\n\n(function (CompletionItem) {\n  /**\r\n   * Create a completion item and seed it with a label.\r\n   * @param label The completion item's label\r\n   */\n  function create(label) {\n    return {\n      label: label\n    };\n  }\n\n  CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\n\n\nexport var CompletionList;\n\n(function (CompletionList) {\n  /**\r\n   * Creates a new completion list.\r\n   *\r\n   * @param items The completion items.\r\n   * @param isIncomplete The list is not complete.\r\n   */\n  function create(items, isIncomplete) {\n    return {\n      items: items ? items : [],\n      isIncomplete: !!isIncomplete\n    };\n  }\n\n  CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\n\nexport var MarkedString;\n\n(function (MarkedString) {\n  /**\r\n   * Creates a marked string from plain text.\r\n   *\r\n   * @param plainText The plain text.\r\n   */\n  function fromPlainText(plainText) {\n    return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n  }\n\n  MarkedString.fromPlainText = fromPlainText;\n  /**\r\n   * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);\n  }\n\n  MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\n\nexport var Hover;\n\n(function (Hover) {\n  /**\r\n   * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n   */\n  function is(value) {\n    var candidate = value;\n    return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\n  }\n\n  Hover.is = is;\n})(Hover || (Hover = {}));\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\n\n\nexport var ParameterInformation;\n\n(function (ParameterInformation) {\n  /**\r\n   * Creates a new parameter information literal.\r\n   *\r\n   * @param label A label string.\r\n   * @param documentation A doc string.\r\n   */\n  function create(label, documentation) {\n    return documentation ? {\n      label: label,\n      documentation: documentation\n    } : {\n      label: label\n    };\n  }\n\n  ParameterInformation.create = create;\n  ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\n\n\nexport var SignatureInformation;\n\n(function (SignatureInformation) {\n  function create(label, documentation) {\n    var parameters = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      parameters[_i - 2] = arguments[_i];\n    }\n\n    var result = {\n      label: label\n    };\n\n    if (Is.defined(documentation)) {\n      result.documentation = documentation;\n    }\n\n    if (Is.defined(parameters)) {\n      result.parameters = parameters;\n    } else {\n      result.parameters = [];\n    }\n\n    return result;\n  }\n\n  SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\r\n * A document highlight kind.\r\n */\n\n\nexport var DocumentHighlightKind;\n\n(function (DocumentHighlightKind) {\n  /**\r\n   * A textual occurrence.\r\n   */\n  DocumentHighlightKind.Text = 1;\n  /**\r\n   * Read-access of a symbol, like reading a variable.\r\n   */\n\n  DocumentHighlightKind.Read = 2;\n  /**\r\n   * Write-access of a symbol, like writing to a variable.\r\n   */\n\n  DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\n\n\nexport var DocumentHighlight;\n\n(function (DocumentHighlight) {\n  /**\r\n   * Create a DocumentHighlight object.\r\n   * @param range The range the highlight applies to.\r\n   */\n  function create(range, kind) {\n    var result = {\n      range: range\n    };\n\n    if (Is.number(kind)) {\n      result.kind = kind;\n    }\n\n    return result;\n  }\n\n  DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\r\n * A symbol kind.\r\n */\n\n\nexport var SymbolKind;\n\n(function (SymbolKind) {\n  SymbolKind.File = 1;\n  SymbolKind.Module = 2;\n  SymbolKind.Namespace = 3;\n  SymbolKind.Package = 4;\n  SymbolKind.Class = 5;\n  SymbolKind.Method = 6;\n  SymbolKind.Property = 7;\n  SymbolKind.Field = 8;\n  SymbolKind.Constructor = 9;\n  SymbolKind.Enum = 10;\n  SymbolKind.Interface = 11;\n  SymbolKind.Function = 12;\n  SymbolKind.Variable = 13;\n  SymbolKind.Constant = 14;\n  SymbolKind.String = 15;\n  SymbolKind.Number = 16;\n  SymbolKind.Boolean = 17;\n  SymbolKind.Array = 18;\n  SymbolKind.Object = 19;\n  SymbolKind.Key = 20;\n  SymbolKind.Null = 21;\n  SymbolKind.EnumMember = 22;\n  SymbolKind.Struct = 23;\n  SymbolKind.Event = 24;\n  SymbolKind.Operator = 25;\n  SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n\nexport var SymbolInformation;\n\n(function (SymbolInformation) {\n  /**\r\n   * Creates a new symbol information literal.\r\n   *\r\n   * @param name The name of the symbol.\r\n   * @param kind The kind of the symbol.\r\n   * @param range The range of the location of the symbol.\r\n   * @param uri The resource of the location of symbol, defaults to the current document.\r\n   * @param containerName The name of the symbol containing the symbol.\r\n   */\n  function create(name, kind, range, uri, containerName) {\n    var result = {\n      name: name,\n      kind: kind,\n      location: {\n        uri: uri,\n        range: range\n      }\n    };\n\n    if (containerName) {\n      result.containerName = containerName;\n    }\n\n    return result;\n  }\n\n  SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\n\n\nvar DocumentSymbol =\n/** @class */\nfunction () {\n  function DocumentSymbol() {}\n\n  return DocumentSymbol;\n}();\n\nexport { DocumentSymbol };\n\n(function (DocumentSymbol) {\n  /**\r\n   * Creates a new symbol information literal.\r\n   *\r\n   * @param name The name of the symbol.\r\n   * @param detail The detail of the symbol.\r\n   * @param kind The kind of the symbol.\r\n   * @param range The range of the symbol.\r\n   * @param selectionRange The selectionRange of the symbol.\r\n   * @param children Children of the symbol.\r\n   */\n  function create(name, detail, kind, range, selectionRange, children) {\n    var result = {\n      name: name,\n      detail: detail,\n      kind: kind,\n      range: range,\n      selectionRange: selectionRange\n    };\n\n    if (children !== void 0) {\n      result.children = children;\n    }\n\n    return result;\n  }\n\n  DocumentSymbol.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children));\n  }\n\n  DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\r\n * A set of predefined code action kinds\r\n */\n\n\nexport var CodeActionKind;\n\n(function (CodeActionKind) {\n  /**\r\n   * Base kind for quickfix actions: 'quickfix'\r\n   */\n  CodeActionKind.QuickFix = 'quickfix';\n  /**\r\n   * Base kind for refactoring actions: 'refactor'\r\n   */\n\n  CodeActionKind.Refactor = 'refactor';\n  /**\r\n   * Base kind for refactoring extraction actions: 'refactor.extract'\r\n   *\r\n   * Example extract actions:\r\n   *\r\n   * - Extract method\r\n   * - Extract function\r\n   * - Extract variable\r\n   * - Extract interface from class\r\n   * - ...\r\n   */\n\n  CodeActionKind.RefactorExtract = 'refactor.extract';\n  /**\r\n   * Base kind for refactoring inline actions: 'refactor.inline'\r\n   *\r\n   * Example inline actions:\r\n   *\r\n   * - Inline function\r\n   * - Inline variable\r\n   * - Inline constant\r\n   * - ...\r\n   */\n\n  CodeActionKind.RefactorInline = 'refactor.inline';\n  /**\r\n   * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n   *\r\n   * Example rewrite actions:\r\n   *\r\n   * - Convert JavaScript function to class\r\n   * - Add or remove parameter\r\n   * - Encapsulate field\r\n   * - Make method static\r\n   * - Move method to base class\r\n   * - ...\r\n   */\n\n  CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n  /**\r\n   * Base kind for source actions: `source`\r\n   *\r\n   * Source code actions apply to the entire file.\r\n   */\n\n  CodeActionKind.Source = 'source';\n  /**\r\n   * Base kind for an organize imports source action: `source.organizeImports`\r\n   */\n\n  CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\n\n\nexport var CodeActionContext;\n\n(function (CodeActionContext) {\n  /**\r\n   * Creates a new CodeActionContext literal.\r\n   */\n  function create(diagnostics, only) {\n    var result = {\n      diagnostics: diagnostics\n    };\n\n    if (only !== void 0 && only !== null) {\n      result.only = only;\n    }\n\n    return result;\n  }\n\n  CodeActionContext.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\n  }\n\n  CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n\nexport var CodeAction;\n\n(function (CodeAction) {\n  function create(title, commandOrEdit, kind) {\n    var result = {\n      title: title\n    };\n\n    if (Command.is(commandOrEdit)) {\n      result.command = commandOrEdit;\n    } else {\n      result.edit = commandOrEdit;\n    }\n\n    if (kind !== void null) {\n      result.kind = kind;\n    }\n\n    return result;\n  }\n\n  CodeAction.create = create;\n\n  function is(value) {\n    var candidate = value;\n    return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\n  }\n\n  CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\n\n\nexport var CodeLens;\n\n(function (CodeLens) {\n  /**\r\n   * Creates a new CodeLens literal.\r\n   */\n  function create(range, data) {\n    var result = {\n      range: range\n    };\n    if (Is.defined(data)) result.data = data;\n    return result;\n  }\n\n  CodeLens.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n  }\n\n  CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\n\n\nexport var FormattingOptions;\n\n(function (FormattingOptions) {\n  /**\r\n   * Creates a new FormattingOptions literal.\r\n   */\n  function create(tabSize, insertSpaces) {\n    return {\n      tabSize: tabSize,\n      insertSpaces: insertSpaces\n    };\n  }\n\n  FormattingOptions.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n  }\n\n  FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\n\n\nvar DocumentLink =\n/** @class */\nfunction () {\n  function DocumentLink() {}\n\n  return DocumentLink;\n}();\n\nexport { DocumentLink };\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\n\n(function (DocumentLink) {\n  /**\r\n   * Creates a new DocumentLink literal.\r\n   */\n  function create(range, target, data) {\n    return {\n      range: range,\n      target: target,\n      data: data\n    };\n  }\n\n  DocumentLink.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n  }\n\n  DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n\n(function (TextDocument) {\n  /**\r\n   * Creates a new ITextDocument literal from the given uri and content.\r\n   * @param uri The document's uri.\r\n   * @param languageId  The document's language Id.\r\n   * @param content The document's content.\r\n   */\n  function create(uri, languageId, version, content) {\n    return new FullTextDocument(uri, languageId, version, content);\n  }\n\n  TextDocument.create = create;\n  /**\r\n   * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n   */\n\n  function is(value) {\n    var candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n  }\n\n  TextDocument.is = is;\n\n  function applyEdits(document, edits) {\n    var text = document.getText();\n    var sortedEdits = mergeSort(edits, function (a, b) {\n      var diff = a.range.start.line - b.range.start.line;\n\n      if (diff === 0) {\n        return a.range.start.character - b.range.start.character;\n      }\n\n      return diff;\n    });\n    var lastModifiedOffset = text.length;\n\n    for (var i = sortedEdits.length - 1; i >= 0; i--) {\n      var e = sortedEdits[i];\n      var startOffset = document.offsetAt(e.range.start);\n      var endOffset = document.offsetAt(e.range.end);\n\n      if (endOffset <= lastModifiedOffset) {\n        text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n      } else {\n        throw new Error('Overlapping edit');\n      }\n\n      lastModifiedOffset = startOffset;\n    }\n\n    return text;\n  }\n\n  TextDocument.applyEdits = applyEdits;\n\n  function mergeSort(data, compare) {\n    if (data.length <= 1) {\n      // sorted\n      return data;\n    }\n\n    var p = data.length / 2 | 0;\n    var left = data.slice(0, p);\n    var right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    var leftIdx = 0;\n    var rightIdx = 0;\n    var i = 0;\n\n    while (leftIdx < left.length && rightIdx < right.length) {\n      var ret = compare(left[leftIdx], right[rightIdx]);\n\n      if (ret <= 0) {\n        // smaller_equal -> take left to preserve order\n        data[i++] = left[leftIdx++];\n      } else {\n        // greater -> take right\n        data[i++] = right[rightIdx++];\n      }\n    }\n\n    while (leftIdx < left.length) {\n      data[i++] = left[leftIdx++];\n    }\n\n    while (rightIdx < right.length) {\n      data[i++] = right[rightIdx++];\n    }\n\n    return data;\n  }\n})(TextDocument || (TextDocument = {}));\n/**\r\n * Represents reasons why a text document is saved.\r\n */\n\n\nexport var TextDocumentSaveReason;\n\n(function (TextDocumentSaveReason) {\n  /**\r\n   * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n   * or by an API call.\r\n   */\n  TextDocumentSaveReason.Manual = 1;\n  /**\r\n   * Automatic after a delay.\r\n   */\n\n  TextDocumentSaveReason.AfterDelay = 2;\n  /**\r\n   * When the editor lost focus.\r\n   */\n\n  TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\n\nvar FullTextDocument =\n/** @class */\nfunction () {\n  function FullTextDocument(uri, languageId, version, content) {\n    this._uri = uri;\n    this._languageId = languageId;\n    this._version = version;\n    this._content = content;\n    this._lineOffsets = null;\n  }\n\n  Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n    get: function get() {\n      return this._uri;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n    get: function get() {\n      return this._languageId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FullTextDocument.prototype, \"version\", {\n    get: function get() {\n      return this._version;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FullTextDocument.prototype.getText = function (range) {\n    if (range) {\n      var start = this.offsetAt(range.start);\n      var end = this.offsetAt(range.end);\n      return this._content.substring(start, end);\n    }\n\n    return this._content;\n  };\n\n  FullTextDocument.prototype.update = function (event, version) {\n    this._content = event.text;\n    this._version = version;\n    this._lineOffsets = null;\n  };\n\n  FullTextDocument.prototype.getLineOffsets = function () {\n    if (this._lineOffsets === null) {\n      var lineOffsets = [];\n      var text = this._content;\n      var isLineStart = true;\n\n      for (var i = 0; i < text.length; i++) {\n        if (isLineStart) {\n          lineOffsets.push(i);\n          isLineStart = false;\n        }\n\n        var ch = text.charAt(i);\n        isLineStart = ch === '\\r' || ch === '\\n';\n\n        if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n          i++;\n        }\n      }\n\n      if (isLineStart && text.length > 0) {\n        lineOffsets.push(text.length);\n      }\n\n      this._lineOffsets = lineOffsets;\n    }\n\n    return this._lineOffsets;\n  };\n\n  FullTextDocument.prototype.positionAt = function (offset) {\n    offset = Math.max(Math.min(offset, this._content.length), 0);\n    var lineOffsets = this.getLineOffsets();\n    var low = 0,\n        high = lineOffsets.length;\n\n    if (high === 0) {\n      return Position.create(0, offset);\n    }\n\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n\n      if (lineOffsets[mid] > offset) {\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    } // low is the least x for which the line offset is larger than the current offset\n    // or array.length if no line offset is larger than the current offset\n\n\n    var line = low - 1;\n    return Position.create(line, offset - lineOffsets[line]);\n  };\n\n  FullTextDocument.prototype.offsetAt = function (position) {\n    var lineOffsets = this.getLineOffsets();\n\n    if (position.line >= lineOffsets.length) {\n      return this._content.length;\n    } else if (position.line < 0) {\n      return 0;\n    }\n\n    var lineOffset = lineOffsets[position.line];\n    var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;\n    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n  };\n\n  Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n    get: function get() {\n      return this.getLineOffsets().length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FullTextDocument;\n}();\n\nvar Is;\n\n(function (Is) {\n  var toString = Object.prototype.toString;\n\n  function defined(value) {\n    return typeof value !== 'undefined';\n  }\n\n  Is.defined = defined;\n\n  function undefined(value) {\n    return typeof value === 'undefined';\n  }\n\n  Is.undefined = undefined;\n\n  function boolean(value) {\n    return value === true || value === false;\n  }\n\n  Is.boolean = boolean;\n\n  function string(value) {\n    return toString.call(value) === '[object String]';\n  }\n\n  Is.string = string;\n\n  function number(value) {\n    return toString.call(value) === '[object Number]';\n  }\n\n  Is.number = number;\n\n  function func(value) {\n    return toString.call(value) === '[object Function]';\n  }\n\n  Is.func = func;\n\n  function objectLiteral(value) {\n    // Strictly speaking class instances pass this check as well. Since the LSP\n    // doesn't use classes we ignore this for now. If we do we need to add something\n    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n    return value !== null && typeof value === 'object';\n  }\n\n  Is.objectLiteral = objectLiteral;\n\n  function typedArray(value, check) {\n    return Array.isArray(value) && value.every(check);\n  }\n\n  Is.typedArray = typedArray;\n})(Is || (Is = {}));","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range; // --- diagnostics --- ---\n\nvar DiagnosticsAdapter =\n/** @class */\nfunction () {\n  function DiagnosticsAdapter(_languageId, _worker, defaults) {\n    var _this = this;\n\n    this._languageId = _languageId;\n    this._worker = _worker;\n    this._disposables = [];\n    this._listener = Object.create(null);\n\n    var onModelAdd = function onModelAdd(model) {\n      var modeId = model.getModeId();\n\n      if (modeId !== _this._languageId) {\n        return;\n      }\n\n      var handle;\n      _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n        clearTimeout(handle);\n        handle = setTimeout(function () {\n          return _this._doValidate(model.uri, modeId);\n        }, 500);\n      });\n\n      _this._doValidate(model.uri, modeId);\n    };\n\n    var onModelRemoved = function onModelRemoved(model) {\n      monaco.editor.setModelMarkers(model, _this._languageId, []);\n      var uriStr = model.uri.toString();\n      var listener = _this._listener[uriStr];\n\n      if (listener) {\n        listener.dispose();\n        delete _this._listener[uriStr];\n      }\n    };\n\n    this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n\n    this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n      onModelRemoved(model);\n\n      _this._resetSchema(model.uri);\n    }));\n\n    this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n      onModelRemoved(event.model);\n      onModelAdd(event.model);\n\n      _this._resetSchema(event.model.uri);\n    }));\n\n    this._disposables.push(defaults.onDidChange(function (_) {\n      monaco.editor.getModels().forEach(function (model) {\n        if (model.getModeId() === _this._languageId) {\n          onModelRemoved(model);\n          onModelAdd(model);\n        }\n      });\n    }));\n\n    this._disposables.push({\n      dispose: function dispose() {\n        monaco.editor.getModels().forEach(onModelRemoved);\n\n        for (var key in _this._listener) {\n          _this._listener[key].dispose();\n        }\n      }\n    });\n\n    monaco.editor.getModels().forEach(onModelAdd);\n  }\n\n  DiagnosticsAdapter.prototype.dispose = function () {\n    this._disposables.forEach(function (d) {\n      return d && d.dispose();\n    });\n\n    this._disposables = [];\n  };\n\n  DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n    this._worker().then(function (worker) {\n      worker.resetSchema(resource.toString());\n    });\n  };\n\n  DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n    this._worker(resource).then(function (worker) {\n      return worker.doValidation(resource.toString()).then(function (diagnostics) {\n        var markers = diagnostics.map(function (d) {\n          return toDiagnostics(resource, d);\n        });\n        var model = monaco.editor.getModel(resource);\n\n        if (model && model.getModeId() === languageId) {\n          monaco.editor.setModelMarkers(model, languageId, markers);\n        }\n      });\n    }).then(undefined, function (err) {\n      console.error(err);\n    });\n  };\n\n  return DiagnosticsAdapter;\n}();\n\nexport { DiagnosticsAdapter };\n\nfunction toSeverity(lsSeverity) {\n  switch (lsSeverity) {\n    case ls.DiagnosticSeverity.Error:\n      return monaco.MarkerSeverity.Error;\n\n    case ls.DiagnosticSeverity.Warning:\n      return monaco.MarkerSeverity.Warning;\n\n    case ls.DiagnosticSeverity.Information:\n      return monaco.MarkerSeverity.Info;\n\n    case ls.DiagnosticSeverity.Hint:\n      return monaco.MarkerSeverity.Hint;\n\n    default:\n      return monaco.MarkerSeverity.Info;\n  }\n}\n\nfunction toDiagnostics(resource, diag) {\n  var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n  return {\n    severity: toSeverity(diag.severity),\n    startLineNumber: diag.range.start.line + 1,\n    startColumn: diag.range.start.character + 1,\n    endLineNumber: diag.range.end.line + 1,\n    endColumn: diag.range.end.character + 1,\n    message: diag.message,\n    code: code,\n    source: diag.source\n  };\n} // --- completion ------\n\n\nfunction fromPosition(position) {\n  if (!position) {\n    return void 0;\n  }\n\n  return {\n    character: position.column - 1,\n    line: position.lineNumber - 1\n  };\n}\n\nfunction fromRange(range) {\n  if (!range) {\n    return void 0;\n  }\n\n  return {\n    start: {\n      line: range.startLineNumber - 1,\n      character: range.startColumn - 1\n    },\n    end: {\n      line: range.endLineNumber - 1,\n      character: range.endColumn - 1\n    }\n  };\n}\n\nfunction toRange(range) {\n  if (!range) {\n    return void 0;\n  }\n\n  return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\n\nfunction toCompletionItemKind(kind) {\n  var mItemKind = monaco.languages.CompletionItemKind;\n\n  switch (kind) {\n    case ls.CompletionItemKind.Text:\n      return mItemKind.Text;\n\n    case ls.CompletionItemKind.Method:\n      return mItemKind.Method;\n\n    case ls.CompletionItemKind.Function:\n      return mItemKind.Function;\n\n    case ls.CompletionItemKind.Constructor:\n      return mItemKind.Constructor;\n\n    case ls.CompletionItemKind.Field:\n      return mItemKind.Field;\n\n    case ls.CompletionItemKind.Variable:\n      return mItemKind.Variable;\n\n    case ls.CompletionItemKind.Class:\n      return mItemKind.Class;\n\n    case ls.CompletionItemKind.Interface:\n      return mItemKind.Interface;\n\n    case ls.CompletionItemKind.Module:\n      return mItemKind.Module;\n\n    case ls.CompletionItemKind.Property:\n      return mItemKind.Property;\n\n    case ls.CompletionItemKind.Unit:\n      return mItemKind.Unit;\n\n    case ls.CompletionItemKind.Value:\n      return mItemKind.Value;\n\n    case ls.CompletionItemKind.Enum:\n      return mItemKind.Enum;\n\n    case ls.CompletionItemKind.Keyword:\n      return mItemKind.Keyword;\n\n    case ls.CompletionItemKind.Snippet:\n      return mItemKind.Snippet;\n\n    case ls.CompletionItemKind.Color:\n      return mItemKind.Color;\n\n    case ls.CompletionItemKind.File:\n      return mItemKind.File;\n\n    case ls.CompletionItemKind.Reference:\n      return mItemKind.Reference;\n  }\n\n  return mItemKind.Property;\n}\n\nfunction fromCompletionItemKind(kind) {\n  var mItemKind = monaco.languages.CompletionItemKind;\n\n  switch (kind) {\n    case mItemKind.Text:\n      return ls.CompletionItemKind.Text;\n\n    case mItemKind.Method:\n      return ls.CompletionItemKind.Method;\n\n    case mItemKind.Function:\n      return ls.CompletionItemKind.Function;\n\n    case mItemKind.Constructor:\n      return ls.CompletionItemKind.Constructor;\n\n    case mItemKind.Field:\n      return ls.CompletionItemKind.Field;\n\n    case mItemKind.Variable:\n      return ls.CompletionItemKind.Variable;\n\n    case mItemKind.Class:\n      return ls.CompletionItemKind.Class;\n\n    case mItemKind.Interface:\n      return ls.CompletionItemKind.Interface;\n\n    case mItemKind.Module:\n      return ls.CompletionItemKind.Module;\n\n    case mItemKind.Property:\n      return ls.CompletionItemKind.Property;\n\n    case mItemKind.Unit:\n      return ls.CompletionItemKind.Unit;\n\n    case mItemKind.Value:\n      return ls.CompletionItemKind.Value;\n\n    case mItemKind.Enum:\n      return ls.CompletionItemKind.Enum;\n\n    case mItemKind.Keyword:\n      return ls.CompletionItemKind.Keyword;\n\n    case mItemKind.Snippet:\n      return ls.CompletionItemKind.Snippet;\n\n    case mItemKind.Color:\n      return ls.CompletionItemKind.Color;\n\n    case mItemKind.File:\n      return ls.CompletionItemKind.File;\n\n    case mItemKind.Reference:\n      return ls.CompletionItemKind.Reference;\n  }\n\n  return ls.CompletionItemKind.Property;\n}\n\nfunction toTextEdit(textEdit) {\n  if (!textEdit) {\n    return void 0;\n  }\n\n  return {\n    range: toRange(textEdit.range),\n    text: textEdit.newText\n  };\n}\n\nvar CompletionAdapter =\n/** @class */\nfunction () {\n  function CompletionAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n    get: function get() {\n      return [' ', ':'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.doComplete(resource.toString(), fromPosition(position));\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      var wordInfo = model.getWordUntilPosition(position);\n      var wordRange = new Range(position.lineNumber, wordInfo.startColumn, position.lineNumber, wordInfo.endColumn);\n      var items = info.items.map(function (entry) {\n        var item = {\n          label: entry.label,\n          insertText: entry.insertText || entry.label,\n          sortText: entry.sortText,\n          filterText: entry.filterText,\n          documentation: entry.documentation,\n          detail: entry.detail,\n          range: wordRange,\n          kind: toCompletionItemKind(entry.kind)\n        };\n\n        if (entry.textEdit) {\n          item.range = toRange(entry.textEdit.range);\n          item.insertText = entry.textEdit.newText;\n        }\n\n        if (entry.additionalTextEdits) {\n          item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\n        }\n\n        if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n          item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n        }\n\n        return item;\n      });\n      return {\n        isIncomplete: info.isIncomplete,\n        suggestions: items\n      };\n    });\n  };\n\n  return CompletionAdapter;\n}();\n\nexport { CompletionAdapter };\n\nfunction isMarkupContent(thing) {\n  return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\n\nfunction toMarkdownString(entry) {\n  if (typeof entry === 'string') {\n    return {\n      value: entry\n    };\n  }\n\n  if (isMarkupContent(entry)) {\n    if (entry.kind === 'plaintext') {\n      return {\n        value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n      };\n    }\n\n    return {\n      value: entry.value\n    };\n  }\n\n  return {\n    value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n'\n  };\n}\n\nfunction toMarkedStringArray(contents) {\n  if (!contents) {\n    return void 0;\n  }\n\n  if (Array.isArray(contents)) {\n    return contents.map(toMarkdownString);\n  }\n\n  return [toMarkdownString(contents)];\n} // --- hover ------\n\n\nvar HoverAdapter =\n/** @class */\nfunction () {\n  function HoverAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  HoverAdapter.prototype.provideHover = function (model, position, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.doHover(resource.toString(), fromPosition(position));\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      return {\n        range: toRange(info.range),\n        contents: toMarkedStringArray(info.contents)\n      };\n    });\n  };\n\n  return HoverAdapter;\n}();\n\nexport { HoverAdapter }; // --- definition ------\n\nfunction toLocation(location) {\n  return {\n    uri: Uri.parse(location.uri),\n    range: toRange(location.range)\n  };\n} // --- document symbols ------\n\n\nfunction toSymbolKind(kind) {\n  var mKind = monaco.languages.SymbolKind;\n\n  switch (kind) {\n    case ls.SymbolKind.File:\n      return mKind.Array;\n\n    case ls.SymbolKind.Module:\n      return mKind.Module;\n\n    case ls.SymbolKind.Namespace:\n      return mKind.Namespace;\n\n    case ls.SymbolKind.Package:\n      return mKind.Package;\n\n    case ls.SymbolKind.Class:\n      return mKind.Class;\n\n    case ls.SymbolKind.Method:\n      return mKind.Method;\n\n    case ls.SymbolKind.Property:\n      return mKind.Property;\n\n    case ls.SymbolKind.Field:\n      return mKind.Field;\n\n    case ls.SymbolKind.Constructor:\n      return mKind.Constructor;\n\n    case ls.SymbolKind.Enum:\n      return mKind.Enum;\n\n    case ls.SymbolKind.Interface:\n      return mKind.Interface;\n\n    case ls.SymbolKind.Function:\n      return mKind.Function;\n\n    case ls.SymbolKind.Variable:\n      return mKind.Variable;\n\n    case ls.SymbolKind.Constant:\n      return mKind.Constant;\n\n    case ls.SymbolKind.String:\n      return mKind.String;\n\n    case ls.SymbolKind.Number:\n      return mKind.Number;\n\n    case ls.SymbolKind.Boolean:\n      return mKind.Boolean;\n\n    case ls.SymbolKind.Array:\n      return mKind.Array;\n  }\n\n  return mKind.Function;\n}\n\nvar DocumentSymbolAdapter =\n/** @class */\nfunction () {\n  function DocumentSymbolAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findDocumentSymbols(resource.toString());\n    }).then(function (items) {\n      if (!items) {\n        return;\n      }\n\n      return items.map(function (item) {\n        return {\n          name: item.name,\n          detail: '',\n          containerName: item.containerName,\n          kind: toSymbolKind(item.kind),\n          range: toRange(item.location.range),\n          selectionRange: toRange(item.location.range)\n        };\n      });\n    });\n  };\n\n  return DocumentSymbolAdapter;\n}();\n\nexport { DocumentSymbolAdapter };\n\nfunction fromFormattingOptions(options) {\n  return {\n    tabSize: options.tabSize,\n    insertSpaces: options.insertSpaces\n  };\n}\n\nvar DocumentFormattingEditProvider =\n/** @class */\nfunction () {\n  function DocumentFormattingEditProvider(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n        if (!edits || edits.length === 0) {\n          return;\n        }\n\n        return edits.map(toTextEdit);\n      });\n    });\n  };\n\n  return DocumentFormattingEditProvider;\n}();\n\nexport { DocumentFormattingEditProvider };\n\nvar DocumentRangeFormattingEditProvider =\n/** @class */\nfunction () {\n  function DocumentRangeFormattingEditProvider(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n        if (!edits || edits.length === 0) {\n          return;\n        }\n\n        return edits.map(toTextEdit);\n      });\n    });\n  };\n\n  return DocumentRangeFormattingEditProvider;\n}();\n\nexport { DocumentRangeFormattingEditProvider };\n\nvar DocumentColorAdapter =\n/** @class */\nfunction () {\n  function DocumentColorAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findDocumentColors(resource.toString());\n    }).then(function (infos) {\n      if (!infos) {\n        return;\n      }\n\n      return infos.map(function (item) {\n        return {\n          color: item.color,\n          range: toRange(item.range)\n        };\n      });\n    });\n  };\n\n  DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range));\n    }).then(function (presentations) {\n      if (!presentations) {\n        return;\n      }\n\n      return presentations.map(function (presentation) {\n        var item = {\n          label: presentation.label\n        };\n\n        if (presentation.textEdit) {\n          item.textEdit = toTextEdit(presentation.textEdit);\n        }\n\n        if (presentation.additionalTextEdits) {\n          item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n        }\n\n        return item;\n      });\n    });\n  };\n\n  return DocumentColorAdapter;\n}();\n\nexport { DocumentColorAdapter };\n\nvar FoldingRangeAdapter =\n/** @class */\nfunction () {\n  function FoldingRangeAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.provideFoldingRanges(resource.toString(), context);\n    }).then(function (ranges) {\n      if (!ranges) {\n        return;\n      }\n\n      return ranges.map(function (range) {\n        var result = {\n          start: range.startLine + 1,\n          end: range.endLine + 1\n        };\n\n        if (typeof range.kind !== 'undefined') {\n          result.kind = toFoldingRangeKind(range.kind);\n        }\n\n        return result;\n      });\n    });\n  };\n\n  return FoldingRangeAdapter;\n}();\n\nexport { FoldingRangeAdapter };\n\nfunction toFoldingRangeKind(kind) {\n  switch (kind) {\n    case ls.FoldingRangeKind.Comment:\n      return monaco.languages.FoldingRangeKind.Comment;\n\n    case ls.FoldingRangeKind.Imports:\n      return monaco.languages.FoldingRangeKind.Imports;\n\n    case ls.FoldingRangeKind.Region:\n      return monaco.languages.FoldingRangeKind.Region;\n  }\n\n  return void 0;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { createScanner } from './scanner.js';\nvar ParseOptions;\n\n(function (ParseOptions) {\n  ParseOptions.DEFAULT = {\n    allowTrailingComma: false\n  };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\n\n\nexport function getLocation(text, position) {\n  var segments = []; // strings or numbers\n\n  var earlyReturnException = new Object();\n  var previousNode = void 0;\n  var previousNodeInst = {\n    value: {},\n    offset: 0,\n    length: 0,\n    type: 'object',\n    parent: void 0\n  };\n  var isAtPropertyKey = false;\n\n  function setPreviousNode(value, offset, length, type) {\n    previousNodeInst.value = value;\n    previousNodeInst.offset = offset;\n    previousNodeInst.length = length;\n    previousNodeInst.type = type;\n    previousNodeInst.colonOffset = void 0;\n    previousNode = previousNodeInst;\n  }\n\n  try {\n    visit(text, {\n      onObjectBegin: function onObjectBegin(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n\n        previousNode = void 0;\n        isAtPropertyKey = position > offset;\n        segments.push(''); // push a placeholder (will be replaced)\n      },\n      onObjectProperty: function onObjectProperty(name, offset, length) {\n        if (position < offset) {\n          throw earlyReturnException;\n        }\n\n        setPreviousNode(name, offset, length, 'property');\n        segments[segments.length - 1] = name;\n\n        if (position <= offset + length) {\n          throw earlyReturnException;\n        }\n      },\n      onObjectEnd: function onObjectEnd(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n\n        previousNode = void 0;\n        segments.pop();\n      },\n      onArrayBegin: function onArrayBegin(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n\n        previousNode = void 0;\n        segments.push(0);\n      },\n      onArrayEnd: function onArrayEnd(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n\n        previousNode = void 0;\n        segments.pop();\n      },\n      onLiteralValue: function onLiteralValue(value, offset, length) {\n        if (position < offset) {\n          throw earlyReturnException;\n        }\n\n        setPreviousNode(value, offset, length, getLiteralNodeType(value));\n\n        if (position <= offset + length) {\n          throw earlyReturnException;\n        }\n      },\n      onSeparator: function onSeparator(sep, offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n\n        if (sep === ':' && previousNode && previousNode.type === 'property') {\n          previousNode.colonOffset = offset;\n          isAtPropertyKey = false;\n          previousNode = void 0;\n        } else if (sep === ',') {\n          var last = segments[segments.length - 1];\n\n          if (typeof last === 'number') {\n            segments[segments.length - 1] = last + 1;\n          } else {\n            isAtPropertyKey = true;\n            segments[segments.length - 1] = '';\n          }\n\n          previousNode = void 0;\n        }\n      }\n    });\n  } catch (e) {\n    if (e !== earlyReturnException) {\n      throw e;\n    }\n  }\n\n  return {\n    path: segments,\n    previousNode: previousNode,\n    isAtPropertyKey: isAtPropertyKey,\n    matches: function matches(pattern) {\n      var k = 0;\n\n      for (var i = 0; k < pattern.length && i < segments.length; i++) {\n        if (pattern[k] === segments[i] || pattern[k] === '*') {\n          k++;\n        } else if (pattern[k] !== '**') {\n          return false;\n        }\n      }\n\n      return k === pattern.length;\n    }\n  };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\n\nexport function parse(text, errors, options) {\n  if (errors === void 0) {\n    errors = [];\n  }\n\n  if (options === void 0) {\n    options = ParseOptions.DEFAULT;\n  }\n\n  var currentProperty = null;\n  var currentParent = [];\n  var previousParents = [];\n\n  function onValue(value) {\n    if (Array.isArray(currentParent)) {\n      currentParent.push(value);\n    } else if (currentProperty) {\n      currentParent[currentProperty] = value;\n    }\n  }\n\n  var visitor = {\n    onObjectBegin: function onObjectBegin() {\n      var object = {};\n      onValue(object);\n      previousParents.push(currentParent);\n      currentParent = object;\n      currentProperty = null;\n    },\n    onObjectProperty: function onObjectProperty(name) {\n      currentProperty = name;\n    },\n    onObjectEnd: function onObjectEnd() {\n      currentParent = previousParents.pop();\n    },\n    onArrayBegin: function onArrayBegin() {\n      var array = [];\n      onValue(array);\n      previousParents.push(currentParent);\n      currentParent = array;\n      currentProperty = null;\n    },\n    onArrayEnd: function onArrayEnd() {\n      currentParent = previousParents.pop();\n    },\n    onLiteralValue: onValue,\n    onError: function onError(error, offset, length) {\n      errors.push({\n        error: error,\n        offset: offset,\n        length: length\n      });\n    }\n  };\n  visit(text, visitor, options);\n  return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\n\nexport function parseTree(text, errors, options) {\n  if (errors === void 0) {\n    errors = [];\n  }\n\n  if (options === void 0) {\n    options = ParseOptions.DEFAULT;\n  }\n\n  var currentParent = {\n    type: 'array',\n    offset: -1,\n    length: -1,\n    children: [],\n    parent: void 0\n  }; // artificial root\n\n  function ensurePropertyComplete(endOffset) {\n    if (currentParent.type === 'property') {\n      currentParent.length = endOffset - currentParent.offset;\n      currentParent = currentParent.parent;\n    }\n  }\n\n  function onValue(valueNode) {\n    currentParent.children.push(valueNode);\n    return valueNode;\n  }\n\n  var visitor = {\n    onObjectBegin: function onObjectBegin(offset) {\n      currentParent = onValue({\n        type: 'object',\n        offset: offset,\n        length: -1,\n        parent: currentParent,\n        children: []\n      });\n    },\n    onObjectProperty: function onObjectProperty(name, offset, length) {\n      currentParent = onValue({\n        type: 'property',\n        offset: offset,\n        length: -1,\n        parent: currentParent,\n        children: []\n      });\n      currentParent.children.push({\n        type: 'string',\n        value: name,\n        offset: offset,\n        length: length,\n        parent: currentParent\n      });\n    },\n    onObjectEnd: function onObjectEnd(offset, length) {\n      currentParent.length = offset + length - currentParent.offset;\n      currentParent = currentParent.parent;\n      ensurePropertyComplete(offset + length);\n    },\n    onArrayBegin: function onArrayBegin(offset, length) {\n      currentParent = onValue({\n        type: 'array',\n        offset: offset,\n        length: -1,\n        parent: currentParent,\n        children: []\n      });\n    },\n    onArrayEnd: function onArrayEnd(offset, length) {\n      currentParent.length = offset + length - currentParent.offset;\n      currentParent = currentParent.parent;\n      ensurePropertyComplete(offset + length);\n    },\n    onLiteralValue: function onLiteralValue(value, offset, length) {\n      onValue({\n        type: getLiteralNodeType(value),\n        offset: offset,\n        length: length,\n        parent: currentParent,\n        value: value\n      });\n      ensurePropertyComplete(offset + length);\n    },\n    onSeparator: function onSeparator(sep, offset, length) {\n      if (currentParent.type === 'property') {\n        if (sep === ':') {\n          currentParent.colonOffset = offset;\n        } else if (sep === ',') {\n          ensurePropertyComplete(offset);\n        }\n      }\n    },\n    onError: function onError(error, offset, length) {\n      errors.push({\n        error: error,\n        offset: offset,\n        length: length\n      });\n    }\n  };\n  visit(text, visitor, options);\n  var result = currentParent.children[0];\n\n  if (result) {\n    delete result.parent;\n  }\n\n  return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\n\nexport function findNodeAtLocation(root, path) {\n  if (!root) {\n    return void 0;\n  }\n\n  var node = root;\n\n  for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n    var segment = path_1[_i];\n\n    if (typeof segment === 'string') {\n      if (node.type !== 'object' || !Array.isArray(node.children)) {\n        return void 0;\n      }\n\n      var found = false;\n\n      for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n        var propertyNode = _b[_a];\n\n        if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n          node = propertyNode.children[1];\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return void 0;\n      }\n    } else {\n      var index = segment;\n\n      if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n        return void 0;\n      }\n\n      node = node.children[index];\n    }\n  }\n\n  return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\n\nexport function getNodePath(node) {\n  if (!node.parent || !node.parent.children) {\n    return [];\n  }\n\n  var path = getNodePath(node.parent);\n\n  if (node.parent.type === 'property') {\n    var key = node.parent.children[0].value;\n    path.push(key);\n  } else if (node.parent.type === 'array') {\n    var index = node.parent.children.indexOf(node);\n\n    if (index !== -1) {\n      path.push(index);\n    }\n  }\n\n  return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\n\nexport function getNodeValue(node) {\n  switch (node.type) {\n    case 'array':\n      return node.children.map(getNodeValue);\n\n    case 'object':\n      var obj = Object.create(null);\n\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var prop = _a[_i];\n        var valueNode = prop.children[1];\n\n        if (valueNode) {\n          obj[prop.children[0].value] = getNodeValue(valueNode);\n        }\n      }\n\n      return obj;\n\n    case 'null':\n    case 'string':\n    case 'number':\n    case 'boolean':\n      return node.value;\n\n    default:\n      return void 0;\n  }\n}\nexport function contains(node, offset, includeRightBound) {\n  if (includeRightBound === void 0) {\n    includeRightBound = false;\n  }\n\n  return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\n\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n  if (includeRightBound === void 0) {\n    includeRightBound = false;\n  }\n\n  if (contains(node, offset, includeRightBound)) {\n    var children = node.children;\n\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n        var item = findNodeAtOffset(children[i], offset, includeRightBound);\n\n        if (item) {\n          return item;\n        }\n      }\n    }\n\n    return node;\n  }\n\n  return void 0;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\n\nexport function visit(text, visitor, options) {\n  if (options === void 0) {\n    options = ParseOptions.DEFAULT;\n  }\n\n  var _scanner = createScanner(text, false);\n\n  function toNoArgVisit(visitFunction) {\n    return visitFunction ? function () {\n      return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength());\n    } : function () {\n      return true;\n    };\n  }\n\n  function toOneArgVisit(visitFunction) {\n    return visitFunction ? function (arg) {\n      return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength());\n    } : function () {\n      return true;\n    };\n  }\n\n  var onObjectBegin = toNoArgVisit(visitor.onObjectBegin),\n      onObjectProperty = toOneArgVisit(visitor.onObjectProperty),\n      onObjectEnd = toNoArgVisit(visitor.onObjectEnd),\n      onArrayBegin = toNoArgVisit(visitor.onArrayBegin),\n      onArrayEnd = toNoArgVisit(visitor.onArrayEnd),\n      onLiteralValue = toOneArgVisit(visitor.onLiteralValue),\n      onSeparator = toOneArgVisit(visitor.onSeparator),\n      onComment = toNoArgVisit(visitor.onComment),\n      onError = toOneArgVisit(visitor.onError);\n  var disallowComments = options && options.disallowComments;\n  var allowTrailingComma = options && options.allowTrailingComma;\n\n  function scanNext() {\n    while (true) {\n      var token = _scanner.scan();\n\n      switch (_scanner.getTokenError()) {\n        case 4\n        /* InvalidUnicode */\n        :\n          handleError(14\n          /* InvalidUnicode */\n          );\n          break;\n\n        case 5\n        /* InvalidEscapeCharacter */\n        :\n          handleError(15\n          /* InvalidEscapeCharacter */\n          );\n          break;\n\n        case 3\n        /* UnexpectedEndOfNumber */\n        :\n          handleError(13\n          /* UnexpectedEndOfNumber */\n          );\n          break;\n\n        case 1\n        /* UnexpectedEndOfComment */\n        :\n          if (!disallowComments) {\n            handleError(11\n            /* UnexpectedEndOfComment */\n            );\n          }\n\n          break;\n\n        case 2\n        /* UnexpectedEndOfString */\n        :\n          handleError(12\n          /* UnexpectedEndOfString */\n          );\n          break;\n\n        case 6\n        /* InvalidCharacter */\n        :\n          handleError(16\n          /* InvalidCharacter */\n          );\n          break;\n      }\n\n      switch (token) {\n        case 12\n        /* LineCommentTrivia */\n        :\n        case 13\n        /* BlockCommentTrivia */\n        :\n          if (disallowComments) {\n            handleError(10\n            /* InvalidCommentToken */\n            );\n          } else {\n            onComment();\n          }\n\n          break;\n\n        case 16\n        /* Unknown */\n        :\n          handleError(1\n          /* InvalidSymbol */\n          );\n          break;\n\n        case 15\n        /* Trivia */\n        :\n        case 14\n        /* LineBreakTrivia */\n        :\n          break;\n\n        default:\n          return token;\n      }\n    }\n  }\n\n  function handleError(error, skipUntilAfter, skipUntil) {\n    if (skipUntilAfter === void 0) {\n      skipUntilAfter = [];\n    }\n\n    if (skipUntil === void 0) {\n      skipUntil = [];\n    }\n\n    onError(error);\n\n    if (skipUntilAfter.length + skipUntil.length > 0) {\n      var token = _scanner.getToken();\n\n      while (token !== 17\n      /* EOF */\n      ) {\n        if (skipUntilAfter.indexOf(token) !== -1) {\n          scanNext();\n          break;\n        } else if (skipUntil.indexOf(token) !== -1) {\n          break;\n        }\n\n        token = scanNext();\n      }\n    }\n  }\n\n  function parseString(isValue) {\n    var value = _scanner.getTokenValue();\n\n    if (isValue) {\n      onLiteralValue(value);\n    } else {\n      onObjectProperty(value);\n    }\n\n    scanNext();\n    return true;\n  }\n\n  function parseLiteral() {\n    switch (_scanner.getToken()) {\n      case 11\n      /* NumericLiteral */\n      :\n        var value = 0;\n\n        try {\n          value = JSON.parse(_scanner.getTokenValue());\n\n          if (typeof value !== 'number') {\n            handleError(2\n            /* InvalidNumberFormat */\n            );\n            value = 0;\n          }\n        } catch (e) {\n          handleError(2\n          /* InvalidNumberFormat */\n          );\n        }\n\n        onLiteralValue(value);\n        break;\n\n      case 7\n      /* NullKeyword */\n      :\n        onLiteralValue(null);\n        break;\n\n      case 8\n      /* TrueKeyword */\n      :\n        onLiteralValue(true);\n        break;\n\n      case 9\n      /* FalseKeyword */\n      :\n        onLiteralValue(false);\n        break;\n\n      default:\n        return false;\n    }\n\n    scanNext();\n    return true;\n  }\n\n  function parseProperty() {\n    if (_scanner.getToken() !== 10\n    /* StringLiteral */\n    ) {\n        handleError(3\n        /* PropertyNameExpected */\n        , [], [2\n        /* CloseBraceToken */\n        , 5\n        /* CommaToken */\n        ]);\n        return false;\n      }\n\n    parseString(false);\n\n    if (_scanner.getToken() === 6\n    /* ColonToken */\n    ) {\n        onSeparator(':');\n        scanNext(); // consume colon\n\n        if (!parseValue()) {\n          handleError(4\n          /* ValueExpected */\n          , [], [2\n          /* CloseBraceToken */\n          , 5\n          /* CommaToken */\n          ]);\n        }\n      } else {\n      handleError(5\n      /* ColonExpected */\n      , [], [2\n      /* CloseBraceToken */\n      , 5\n      /* CommaToken */\n      ]);\n    }\n\n    return true;\n  }\n\n  function parseObject() {\n    onObjectBegin();\n    scanNext(); // consume open brace\n\n    var needsComma = false;\n\n    while (_scanner.getToken() !== 2\n    /* CloseBraceToken */\n    && _scanner.getToken() !== 17\n    /* EOF */\n    ) {\n      if (_scanner.getToken() === 5\n      /* CommaToken */\n      ) {\n          if (!needsComma) {\n            handleError(4\n            /* ValueExpected */\n            , [], []);\n          }\n\n          onSeparator(',');\n          scanNext(); // consume comma\n\n          if (_scanner.getToken() === 2\n          /* CloseBraceToken */\n          && allowTrailingComma) {\n            break;\n          }\n        } else if (needsComma) {\n        handleError(6\n        /* CommaExpected */\n        , [], []);\n      }\n\n      if (!parseProperty()) {\n        handleError(4\n        /* ValueExpected */\n        , [], [2\n        /* CloseBraceToken */\n        , 5\n        /* CommaToken */\n        ]);\n      }\n\n      needsComma = true;\n    }\n\n    onObjectEnd();\n\n    if (_scanner.getToken() !== 2\n    /* CloseBraceToken */\n    ) {\n        handleError(7\n        /* CloseBraceExpected */\n        , [2\n        /* CloseBraceToken */\n        ], []);\n      } else {\n      scanNext(); // consume close brace\n    }\n\n    return true;\n  }\n\n  function parseArray() {\n    onArrayBegin();\n    scanNext(); // consume open bracket\n\n    var needsComma = false;\n\n    while (_scanner.getToken() !== 4\n    /* CloseBracketToken */\n    && _scanner.getToken() !== 17\n    /* EOF */\n    ) {\n      if (_scanner.getToken() === 5\n      /* CommaToken */\n      ) {\n          if (!needsComma) {\n            handleError(4\n            /* ValueExpected */\n            , [], []);\n          }\n\n          onSeparator(',');\n          scanNext(); // consume comma\n\n          if (_scanner.getToken() === 4\n          /* CloseBracketToken */\n          && allowTrailingComma) {\n            break;\n          }\n        } else if (needsComma) {\n        handleError(6\n        /* CommaExpected */\n        , [], []);\n      }\n\n      if (!parseValue()) {\n        handleError(4\n        /* ValueExpected */\n        , [], [4\n        /* CloseBracketToken */\n        , 5\n        /* CommaToken */\n        ]);\n      }\n\n      needsComma = true;\n    }\n\n    onArrayEnd();\n\n    if (_scanner.getToken() !== 4\n    /* CloseBracketToken */\n    ) {\n        handleError(8\n        /* CloseBracketExpected */\n        , [4\n        /* CloseBracketToken */\n        ], []);\n      } else {\n      scanNext(); // consume close bracket\n    }\n\n    return true;\n  }\n\n  function parseValue() {\n    switch (_scanner.getToken()) {\n      case 3\n      /* OpenBracketToken */\n      :\n        return parseArray();\n\n      case 1\n      /* OpenBraceToken */\n      :\n        return parseObject();\n\n      case 10\n      /* StringLiteral */\n      :\n        return parseString(true);\n\n      default:\n        return parseLiteral();\n    }\n  }\n\n  scanNext();\n\n  if (_scanner.getToken() === 17\n  /* EOF */\n  ) {\n      return true;\n    }\n\n  if (!parseValue()) {\n    handleError(4\n    /* ValueExpected */\n    , [], []);\n    return false;\n  }\n\n  if (_scanner.getToken() !== 17\n  /* EOF */\n  ) {\n      handleError(9\n      /* EndOfFileExpected */\n      , [], []);\n    }\n\n  return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\n\nexport function stripComments(text, replaceCh) {\n  var _scanner = createScanner(text),\n      parts = [],\n      kind,\n      offset = 0,\n      pos;\n\n  do {\n    pos = _scanner.getPosition();\n    kind = _scanner.scan();\n\n    switch (kind) {\n      case 12\n      /* LineCommentTrivia */\n      :\n      case 13\n      /* BlockCommentTrivia */\n      :\n      case 17\n      /* EOF */\n      :\n        if (offset !== pos) {\n          parts.push(text.substring(offset, pos));\n        }\n\n        if (replaceCh !== void 0) {\n          parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n        }\n\n        offset = _scanner.getPosition();\n        break;\n    }\n  } while (kind !== 17\n  /* EOF */\n  );\n\n  return parts.join('');\n}\n\nfunction getLiteralNodeType(value) {\n  switch (typeof value) {\n    case 'boolean':\n      return 'boolean';\n\n    case 'number':\n      return 'number';\n\n    case 'string':\n      return 'string';\n\n    default:\n      return 'null';\n  }\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\n\nexport function createScanner(text, ignoreTrivia) {\n  if (ignoreTrivia === void 0) {\n    ignoreTrivia = false;\n  }\n\n  var pos = 0,\n      len = text.length,\n      value = '',\n      tokenOffset = 0,\n      token = 16\n  /* Unknown */\n  ,\n      scanError = 0\n  /* None */\n  ;\n\n  function scanHexDigits(count, exact) {\n    var digits = 0;\n    var value = 0;\n\n    while (digits < count || !exact) {\n      var ch = text.charCodeAt(pos);\n\n      if (ch >= 48\n      /* _0 */\n      && ch <= 57\n      /* _9 */\n      ) {\n          value = value * 16 + ch - 48\n          /* _0 */\n          ;\n        } else if (ch >= 65\n      /* A */\n      && ch <= 70\n      /* F */\n      ) {\n          value = value * 16 + ch - 65\n          /* A */\n          + 10;\n        } else if (ch >= 97\n      /* a */\n      && ch <= 102\n      /* f */\n      ) {\n          value = value * 16 + ch - 97\n          /* a */\n          + 10;\n        } else {\n        break;\n      }\n\n      pos++;\n      digits++;\n    }\n\n    if (digits < count) {\n      value = -1;\n    }\n\n    return value;\n  }\n\n  function setPosition(newPosition) {\n    pos = newPosition;\n    value = '';\n    tokenOffset = 0;\n    token = 16\n    /* Unknown */\n    ;\n    scanError = 0\n    /* None */\n    ;\n  }\n\n  function scanNumber() {\n    var start = pos;\n\n    if (text.charCodeAt(pos) === 48\n    /* _0 */\n    ) {\n        pos++;\n      } else {\n      pos++;\n\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n    }\n\n    if (pos < text.length && text.charCodeAt(pos) === 46\n    /* dot */\n    ) {\n        pos++;\n\n        if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n\n          while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n            pos++;\n          }\n        } else {\n          scanError = 3\n          /* UnexpectedEndOfNumber */\n          ;\n          return text.substring(start, pos);\n        }\n      }\n\n    var end = pos;\n\n    if (pos < text.length && (text.charCodeAt(pos) === 69\n    /* E */\n    || text.charCodeAt(pos) === 101\n    /* e */\n    )) {\n      pos++;\n\n      if (pos < text.length && text.charCodeAt(pos) === 43\n      /* plus */\n      || text.charCodeAt(pos) === 45\n      /* minus */\n      ) {\n          pos++;\n        }\n\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n\n        end = pos;\n      } else {\n        scanError = 3\n        /* UnexpectedEndOfNumber */\n        ;\n      }\n    }\n\n    return text.substring(start, end);\n  }\n\n  function scanString() {\n    var result = '',\n        start = pos;\n\n    while (true) {\n      if (pos >= len) {\n        result += text.substring(start, pos);\n        scanError = 2\n        /* UnexpectedEndOfString */\n        ;\n        break;\n      }\n\n      var ch = text.charCodeAt(pos);\n\n      if (ch === 34\n      /* doubleQuote */\n      ) {\n          result += text.substring(start, pos);\n          pos++;\n          break;\n        }\n\n      if (ch === 92\n      /* backslash */\n      ) {\n          result += text.substring(start, pos);\n          pos++;\n\n          if (pos >= len) {\n            scanError = 2\n            /* UnexpectedEndOfString */\n            ;\n            break;\n          }\n\n          ch = text.charCodeAt(pos++);\n\n          switch (ch) {\n            case 34\n            /* doubleQuote */\n            :\n              result += '\\\"';\n              break;\n\n            case 92\n            /* backslash */\n            :\n              result += '\\\\';\n              break;\n\n            case 47\n            /* slash */\n            :\n              result += '/';\n              break;\n\n            case 98\n            /* b */\n            :\n              result += '\\b';\n              break;\n\n            case 102\n            /* f */\n            :\n              result += '\\f';\n              break;\n\n            case 110\n            /* n */\n            :\n              result += '\\n';\n              break;\n\n            case 114\n            /* r */\n            :\n              result += '\\r';\n              break;\n\n            case 116\n            /* t */\n            :\n              result += '\\t';\n              break;\n\n            case 117\n            /* u */\n            :\n              var ch_1 = scanHexDigits(4, true);\n\n              if (ch_1 >= 0) {\n                result += String.fromCharCode(ch_1);\n              } else {\n                scanError = 4\n                /* InvalidUnicode */\n                ;\n              }\n\n              break;\n\n            default:\n              scanError = 5\n              /* InvalidEscapeCharacter */\n              ;\n          }\n\n          start = pos;\n          continue;\n        }\n\n      if (ch >= 0 && ch <= 0x1f) {\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          scanError = 2\n          /* UnexpectedEndOfString */\n          ;\n          break;\n        } else {\n          scanError = 6\n          /* InvalidCharacter */\n          ; // mark as error but continue with string\n        }\n      }\n\n      pos++;\n    }\n\n    return result;\n  }\n\n  function scanNext() {\n    value = '';\n    scanError = 0\n    /* None */\n    ;\n    tokenOffset = pos;\n\n    if (pos >= len) {\n      // at the end\n      tokenOffset = len;\n      return token = 17\n      /* EOF */\n      ;\n    }\n\n    var code = text.charCodeAt(pos); // trivia: whitespace\n\n    if (isWhiteSpace(code)) {\n      do {\n        pos++;\n        value += String.fromCharCode(code);\n        code = text.charCodeAt(pos);\n      } while (isWhiteSpace(code));\n\n      return token = 15\n      /* Trivia */\n      ;\n    } // trivia: newlines\n\n\n    if (isLineBreak(code)) {\n      pos++;\n      value += String.fromCharCode(code);\n\n      if (code === 13\n      /* carriageReturn */\n      && text.charCodeAt(pos) === 10\n      /* lineFeed */\n      ) {\n          pos++;\n          value += '\\n';\n        }\n\n      return token = 14\n      /* LineBreakTrivia */\n      ;\n    }\n\n    switch (code) {\n      // tokens: []{}:,\n      case 123\n      /* openBrace */\n      :\n        pos++;\n        return token = 1\n        /* OpenBraceToken */\n        ;\n\n      case 125\n      /* closeBrace */\n      :\n        pos++;\n        return token = 2\n        /* CloseBraceToken */\n        ;\n\n      case 91\n      /* openBracket */\n      :\n        pos++;\n        return token = 3\n        /* OpenBracketToken */\n        ;\n\n      case 93\n      /* closeBracket */\n      :\n        pos++;\n        return token = 4\n        /* CloseBracketToken */\n        ;\n\n      case 58\n      /* colon */\n      :\n        pos++;\n        return token = 6\n        /* ColonToken */\n        ;\n\n      case 44\n      /* comma */\n      :\n        pos++;\n        return token = 5\n        /* CommaToken */\n        ;\n      // strings\n\n      case 34\n      /* doubleQuote */\n      :\n        pos++;\n        value = scanString();\n        return token = 10\n        /* StringLiteral */\n        ;\n      // comments\n\n      case 47\n      /* slash */\n      :\n        var start = pos - 1; // Single-line comment\n\n        if (text.charCodeAt(pos + 1) === 47\n        /* slash */\n        ) {\n            pos += 2;\n\n            while (pos < len) {\n              if (isLineBreak(text.charCodeAt(pos))) {\n                break;\n              }\n\n              pos++;\n            }\n\n            value = text.substring(start, pos);\n            return token = 12\n            /* LineCommentTrivia */\n            ;\n          } // Multi-line comment\n\n\n        if (text.charCodeAt(pos + 1) === 42\n        /* asterisk */\n        ) {\n            pos += 2;\n            var safeLength = len - 1; // For lookahead.\n\n            var commentClosed = false;\n\n            while (pos < safeLength) {\n              var ch = text.charCodeAt(pos);\n\n              if (ch === 42\n              /* asterisk */\n              && text.charCodeAt(pos + 1) === 47\n              /* slash */\n              ) {\n                  pos += 2;\n                  commentClosed = true;\n                  break;\n                }\n\n              pos++;\n            }\n\n            if (!commentClosed) {\n              pos++;\n              scanError = 1\n              /* UnexpectedEndOfComment */\n              ;\n            }\n\n            value = text.substring(start, pos);\n            return token = 13\n            /* BlockCommentTrivia */\n            ;\n          } // just a single slash\n\n\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16\n        /* Unknown */\n        ;\n      // numbers\n\n      case 45\n      /* minus */\n      :\n        value += String.fromCharCode(code);\n        pos++;\n\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\n          return token = 16\n          /* Unknown */\n          ;\n        }\n\n      // found a minus, followed by a number so\n      // we fall through to proceed with scanning\n      // numbers\n\n      case 48\n      /* _0 */\n      :\n      case 49\n      /* _1 */\n      :\n      case 50\n      /* _2 */\n      :\n      case 51\n      /* _3 */\n      :\n      case 52\n      /* _4 */\n      :\n      case 53\n      /* _5 */\n      :\n      case 54\n      /* _6 */\n      :\n      case 55\n      /* _7 */\n      :\n      case 56\n      /* _8 */\n      :\n      case 57\n      /* _9 */\n      :\n        value += scanNumber();\n        return token = 11\n        /* NumericLiteral */\n        ;\n      // literals and unknown symbols\n\n      default:\n        // is a literal? Read the full word.\n        while (pos < len && isUnknownContentCharacter(code)) {\n          pos++;\n          code = text.charCodeAt(pos);\n        }\n\n        if (tokenOffset !== pos) {\n          value = text.substring(tokenOffset, pos); // keywords: true, false, null\n\n          switch (value) {\n            case 'true':\n              return token = 8\n              /* TrueKeyword */\n              ;\n\n            case 'false':\n              return token = 9\n              /* FalseKeyword */\n              ;\n\n            case 'null':\n              return token = 7\n              /* NullKeyword */\n              ;\n          }\n\n          return token = 16\n          /* Unknown */\n          ;\n        } // some\n\n\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16\n        /* Unknown */\n        ;\n    }\n  }\n\n  function isUnknownContentCharacter(code) {\n    if (isWhiteSpace(code) || isLineBreak(code)) {\n      return false;\n    }\n\n    switch (code) {\n      case 125\n      /* closeBrace */\n      :\n      case 93\n      /* closeBracket */\n      :\n      case 123\n      /* openBrace */\n      :\n      case 91\n      /* openBracket */\n      :\n      case 34\n      /* doubleQuote */\n      :\n      case 58\n      /* colon */\n      :\n      case 44\n      /* comma */\n      :\n      case 47\n      /* slash */\n      :\n        return false;\n    }\n\n    return true;\n  }\n\n  function scanNextNonTrivia() {\n    var result;\n\n    do {\n      result = scanNext();\n    } while (result >= 12\n    /* LineCommentTrivia */\n    && result <= 15\n    /* Trivia */\n    );\n\n    return result;\n  }\n\n  return {\n    setPosition: setPosition,\n    getPosition: function getPosition() {\n      return pos;\n    },\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n    getToken: function getToken() {\n      return token;\n    },\n    getTokenValue: function getTokenValue() {\n      return value;\n    },\n    getTokenOffset: function getTokenOffset() {\n      return tokenOffset;\n    },\n    getTokenLength: function getTokenLength() {\n      return pos - tokenOffset;\n    },\n    getTokenError: function getTokenError() {\n      return scanError;\n    }\n  };\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 32\n  /* space */\n  || ch === 9\n  /* tab */\n  || ch === 11\n  /* verticalTab */\n  || ch === 12\n  /* formFeed */\n  || ch === 160\n  /* nonBreakingSpace */\n  || ch === 5760\n  /* ogham */\n  || ch >= 8192\n  /* enQuad */\n  && ch <= 8203\n  /* zeroWidthSpace */\n  || ch === 8239\n  /* narrowNoBreakSpace */\n  || ch === 8287\n  /* mathematicalSpace */\n  || ch === 12288\n  /* ideographicSpace */\n  || ch === 65279\n  /* byteOrderMark */\n  ;\n}\n\nfunction isLineBreak(ch) {\n  return ch === 10\n  /* lineFeed */\n  || ch === 13\n  /* carriageReturn */\n  || ch === 8232\n  /* lineSeparator */\n  || ch === 8233\n  /* paragraphSeparator */\n  ;\n}\n\nfunction isDigit(ch) {\n  return ch >= 48\n  /* _0 */\n  && ch <= 57\n  /* _9 */\n  ;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\n\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\n\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\n\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\n\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\n\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\n\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\n\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\n\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\n\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\n\nexport var stripComments = parser.stripComments;\nexport function printParseErrorCode(code) {\n  switch (code) {\n    case 1\n    /* InvalidSymbol */\n    :\n      return 'InvalidSymbol';\n\n    case 2\n    /* InvalidNumberFormat */\n    :\n      return 'InvalidNumberFormat';\n\n    case 3\n    /* PropertyNameExpected */\n    :\n      return 'PropertyNameExpected';\n\n    case 4\n    /* ValueExpected */\n    :\n      return 'ValueExpected';\n\n    case 5\n    /* ColonExpected */\n    :\n      return 'ColonExpected';\n\n    case 6\n    /* CommaExpected */\n    :\n      return 'CommaExpected';\n\n    case 7\n    /* CloseBraceExpected */\n    :\n      return 'CloseBraceExpected';\n\n    case 8\n    /* CloseBracketExpected */\n    :\n      return 'CloseBracketExpected';\n\n    case 9\n    /* EndOfFileExpected */\n    :\n      return 'EndOfFileExpected';\n\n    case 10\n    /* InvalidCommentToken */\n    :\n      return 'InvalidCommentToken';\n\n    case 11\n    /* UnexpectedEndOfComment */\n    :\n      return 'UnexpectedEndOfComment';\n\n    case 12\n    /* UnexpectedEndOfString */\n    :\n      return 'UnexpectedEndOfString';\n\n    case 13\n    /* UnexpectedEndOfNumber */\n    :\n      return 'UnexpectedEndOfNumber';\n\n    case 14\n    /* InvalidUnicode */\n    :\n      return 'InvalidUnicode';\n\n    case 15\n    /* InvalidEscapeCharacter */\n    :\n      return 'InvalidEscapeCharacter';\n\n    case 16\n    /* InvalidCharacter */\n    :\n      return 'InvalidCharacter';\n  }\n\n  return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\n\nexport function format(documentText, range, options) {\n  return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\n\nexport function modify(text, path, value, options) {\n  return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\n\nexport function applyEdits(text, edits) {\n  for (var i = edits.length - 1; i >= 0; i--) {\n    text = edit.applyEdit(text, edits[i]);\n  }\n\n  return text;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n  return {\n    getInitialState: function getInitialState() {\n      return new JSONState(null, null, false);\n    },\n    tokenize: function tokenize(line, state, offsetDelta, stopAtOffset) {\n      return _tokenize(supportComments, line, state, offsetDelta, stopAtOffset);\n    }\n  };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\n\nvar JSONState =\n/** @class */\nfunction () {\n  function JSONState(state, scanError, lastWasColon) {\n    this._state = state;\n    this.scanError = scanError;\n    this.lastWasColon = lastWasColon;\n  }\n\n  JSONState.prototype.clone = function () {\n    return new JSONState(this._state, this.scanError, this.lastWasColon);\n  };\n\n  JSONState.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    }\n\n    if (!other || !(other instanceof JSONState)) {\n      return false;\n    }\n\n    return this.scanError === other.scanError && this.lastWasColon === other.lastWasColon;\n  };\n\n  JSONState.prototype.getStateData = function () {\n    return this._state;\n  };\n\n  JSONState.prototype.setStateData = function (state) {\n    this._state = state;\n  };\n\n  return JSONState;\n}();\n\nfunction _tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n  if (offsetDelta === void 0) {\n    offsetDelta = 0;\n  } // handle multiline strings and block comments\n\n\n  var numberOfInsertedCharacters = 0,\n      adjustOffset = false;\n\n  switch (state.scanError) {\n    case 2\n    /* UnexpectedEndOfString */\n    :\n      line = '\"' + line;\n      numberOfInsertedCharacters = 1;\n      break;\n\n    case 1\n    /* UnexpectedEndOfComment */\n    :\n      line = '/*' + line;\n      numberOfInsertedCharacters = 2;\n      break;\n  }\n\n  var scanner = json.createScanner(line),\n      kind,\n      ret,\n      lastWasColon = state.lastWasColon;\n  ret = {\n    tokens: [],\n    endState: state.clone()\n  };\n\n  while (true) {\n    var offset = offsetDelta + scanner.getPosition(),\n        type = '';\n    kind = scanner.scan();\n\n    if (kind === 17\n    /* EOF */\n    ) {\n        break;\n      } // Check that the scanner has advanced\n\n\n    if (offset === offsetDelta + scanner.getPosition()) {\n      throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n    } // In case we inserted /* or \" character, we need to\n    // adjust the offset of all tokens (except the first)\n\n\n    if (adjustOffset) {\n      offset -= numberOfInsertedCharacters;\n    }\n\n    adjustOffset = numberOfInsertedCharacters > 0; // brackets and type\n\n    switch (kind) {\n      case 1\n      /* OpenBraceToken */\n      :\n        type = TOKEN_DELIM_OBJECT;\n        lastWasColon = false;\n        break;\n\n      case 2\n      /* CloseBraceToken */\n      :\n        type = TOKEN_DELIM_OBJECT;\n        lastWasColon = false;\n        break;\n\n      case 3\n      /* OpenBracketToken */\n      :\n        type = TOKEN_DELIM_ARRAY;\n        lastWasColon = false;\n        break;\n\n      case 4\n      /* CloseBracketToken */\n      :\n        type = TOKEN_DELIM_ARRAY;\n        lastWasColon = false;\n        break;\n\n      case 6\n      /* ColonToken */\n      :\n        type = TOKEN_DELIM_COLON;\n        lastWasColon = true;\n        break;\n\n      case 5\n      /* CommaToken */\n      :\n        type = TOKEN_DELIM_COMMA;\n        lastWasColon = false;\n        break;\n\n      case 8\n      /* TrueKeyword */\n      :\n      case 9\n      /* FalseKeyword */\n      :\n        type = TOKEN_VALUE_BOOLEAN;\n        lastWasColon = false;\n        break;\n\n      case 7\n      /* NullKeyword */\n      :\n        type = TOKEN_VALUE_NULL;\n        lastWasColon = false;\n        break;\n\n      case 10\n      /* StringLiteral */\n      :\n        type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n        lastWasColon = false;\n        break;\n\n      case 11\n      /* NumericLiteral */\n      :\n        type = TOKEN_VALUE_NUMBER;\n        lastWasColon = false;\n        break;\n    } // comments, iff enabled\n\n\n    if (comments) {\n      switch (kind) {\n        case 12\n        /* LineCommentTrivia */\n        :\n          type = TOKEN_COMMENT_LINE;\n          break;\n\n        case 13\n        /* BlockCommentTrivia */\n        :\n          type = TOKEN_COMMENT_BLOCK;\n          break;\n      }\n    }\n\n    ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n    ret.tokens.push({\n      startIndex: offset,\n      scopes: type\n    });\n  }\n\n  return ret;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n  var disposables = [];\n  var client = new WorkerManager(defaults);\n  disposables.push(client);\n\n  var worker = function worker() {\n    var uris = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      uris[_i] = arguments[_i];\n    }\n\n    return client.getLanguageServiceWorker.apply(client, uris);\n  };\n\n  var languageId = defaults.languageId;\n  disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n  disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n  disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n  disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n  disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n  disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n  disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n  disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n  disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\n  disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\n}\nvar richEditConfiguration = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}',\n    notIn: ['string']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }]\n};"],"sourceRoot":""}